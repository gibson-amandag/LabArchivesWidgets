my_widget_script={mouseNums:[],mice:{},
trtGroupNums:[],trtGroups:{},mode:"edit",
init:function(mode,json_data){
this.include("https://code.jquery.com/jquery-3.5.1.min.js","sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=","anonymous",()=>{
$(document).ready(()=>{
this.include("https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js","sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl","anonymous",()=>{
$(document).ready(()=>{
this.include("https://cdn.jsdelivr.net/npm/luxon@1.26.0/build/global/luxon.min.js","sha256-4sbTzmCCW9LGrIh5OsN8V5Pfdad1F1MwhLAOyXKnsE0=","anonymous",()=>{
$(document).ready(()=>{
this.include("https://cdnjs.cloudflare.com/ajax/libs/bootbox.js/5.5.2/bootbox.min.js","sha512-RdSPYh1WA6BF0RhpisYJVYkOyTzK4HwofJ3Q7ivt/jkpW6Vc8AurL1R+4AUcvn9IwEKAPm/fk7qFZW3OuiUDeg==","anonymous",()=>{
$(document).ready(()=>{
this.include("https://cdnjs.cloudflare.com/ajax/libs/selectize.js/0.15.0/js/selectize.js","sha512-1HjnkKhHSDunRgIHRK4gXORl/T0WxhVkiQ5gjwvrH4yQK9RqPqYnPPwJfh+6gYTc/U9Cg8n4MGRZV1CzsP0UIA==","anonymous",()=>{
this.include("https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.2/papaparse.min.js","sha512-SGWgwwRA8xZgEoKiex3UubkSkV1zSE1BS6O4pXcaxcNtUlQsOmOmhVnDwIvqGRfEmuz83tIGL13cXMZn6upPyg==","anonymous",()=>{
$jq351=jQuery.noConflict(true),
this.myInit(mode,json_data)})})})})})})})})})})},
include:function(src,integrity,crossorigin,onload){
var head=document.getElementsByTagName("head")[0],script=document.createElement("script")
;script.setAttribute("integrity",integrity),
script.setAttribute("crossorigin",crossorigin),
script.src=src,script.type="text/javascript",
script.onload=script.onreadystatechange=function(){
if(script.readyState){
if("complete"===script.readyState||"loaded"===script.readyState)script.onreadystatechange=null,
onload()}else onload()},head.appendChild(script)},
myInit:function(mode,json_data){this.mode=mode
;var parsedJson=this.parseInitJson(json_data)
;this.initDynamicContent(parsedJson),
window.onresize=(()=>this.resize()),this.addEventListeners(),
this.parent_class.init(mode,()=>JSON.stringify(parsedJson.widgetData)),
this.addRequiredFieldIndicators(),
this.setUpInitialState(),this.adjustForMode(mode),
this.checkForNames()},to_json:function(){
var widgetJsonString=this.parent_class.to_json(),dynamicContent=this.getDynamicContent(),output={
widgetData:JSON.parse(widgetJsonString),
trtGroupNums:this.trtGroupNums,
trtGroups:this.trtGroups,mouseNums:this.mouseNums,
mice:this.mice};return JSON.stringify(output)},
from_json:function(json_data){
var parsedJson=JSON.parse(json_data)
;this.parent_class.from_json(JSON.stringify(parsedJson.widgetData))
},test_data:function(){
var testData=JSON.parse(this.parent_class.test_data()),output={
widgetData:testData};return JSON.stringify(output)
},is_valid:function(b_suppress_message){
var fail=false,fail_log="",name
;if($("#the_form").find("select, textarea, input").each((i,e)=>{
if(!$(e).prop("required"));else if(!$(e).val())fail=true,
name=$(e).attr("id"),fail_log+=name+" is required \n"
}),$("input[type='date']").each((i,e)=>{
var date=$(e).val();if(date){
var validDate=this.isValidDate(date)
;if(!validDate)fail=true,fail_log+="Please enter valid date in form 'YYYY-MM-DD'"
}}),$("input[type='time']").each((i,e)=>{
var time=$(e).val();if(time){
var validtime=this.isValidTime(time)
;if(!validtime)fail=true,fail_log+="Please enter valid time in form 'hh:mm' - 24 hr time"
}}),fail)return bootbox.alert(fail_log);else{
var noErrors=[];return noErrors}},
is_edited:function(){
return this.parent_class.is_edited()},
reset_edited:function(){
return this.parent_class.reset_edited()},
parseInitJson:function(json_data){var jsonString
;if("string"===typeof json_data)jsonString=json_data;else jsonString=json_data()
;var parsedJson=JSON.parse(jsonString)
;return parsedJson},
initDynamicContent:function(parsedJson){
if(parsedJson.trtGroups)this.trtGroups=parsedJson.trtGroups
;if(parsedJson.trtGroupNums){
for(trtGroupNum of parsedJson.trtGroupNums)this.makeTrtGroupCard(trtGroupNum)
;this.trtGroupNums=parsedJson.trtGroupNums}
if(parsedJson.mice)this.mice=parsedJson.mice
;if(parsedJson.mouseNums){
for(mouseNum of parsedJson.mouseNums){
this.makeMouseCard(mouseNum)
;var regNums=this.mice[mouseNum].regNums
;if(regNums)for(regNum of regNums)this.makeRegionSeries(mouseNum,regNum)
}this.mouseNums=parsedJson.mouseNums}},
adjustForMode:function(mode){
if("edit"!==mode&&"edit_dev"!==mode)$(".disableOnView").prop("disabled",true),
$("input[type='date']").not(".editOnView").removeClass(".hasDatePicker"),
$(".editOnView").prop("readonly","").prop("disabled",""),
$(".editOnView").find("option").prop("disabled",""),
$(".hideView").hide(),$("#dueDate").datepicker({
dateFormat:"yy-mm-dd"
}),$("#careDate").datepicker({
dateFormat:"yy-mm-dd"
}),$(".filter").prop("readonly","").prop("disabled",""),$(".filter").find("option").prop("disabled","");else $("input[type='date']").each((i,e)=>{
this.checkDateFormat($(e))
}),$("input[type='time']").each((i,e)=>{
this.checkTimeFormat($(e))})},
addEventListeners:function(){},
addRequiredFieldIndicators:function(){
$(".needForTableLab").each((i,e)=>{
$(e).html("<span class='hideView' style='color:blue'>#</span>"+$(e).html())
}),$(".requiredLab").each((i,e)=>{
$(e).html("<span class='hideView' style='color:red'>*</span>"+$(e).html())
})},isValidTime:function(timeString){
var regEx="^(((([0-1][0-9])|(2[0-3])):[0-5][0-9]))$"
;if(!timeString.match(regEx))return false;else return true
},isTimeSupported:function(){
var input=document.createElement("input")
;input.setAttribute("type","time")
;var supported=true
;if("time"!==input.type)supported=false
;return this.timeSupported=supported,input.remove(),
supported},timeSupported:true,
checkTimeFormat:function($timeInput){
if(!this.timeSupported){
$timeInput.next(".timeWarning").remove()
;var time=$timeInput.val(),isValid=this.isValidTime(time)
;if(!isValid)$timeInput.after('<div class="text-danger timeWarning">Enter time as "hh:mm" in 24-hr format</div>')
;this.resize()}},isValidDate:function(dateString){
var regEx=/^\d{4}-\d{2}-\d{2}$/
;if(!dateString.match(regEx))return false
;var d=new Date(dateString),dNum=d.getTime()
;if(!dNum&&0!==dNum)return false
;return d.toISOString().slice(0,10)===dateString},
isDateSupported:function(){
var input=document.createElement("input")
;input.setAttribute("type","date")
;var supported=true
;if("date"!==input.type)supported=false
;return this.dateSupported=supported,input.remove(),
supported},dateSupported:true,
checkDateFormat:function($dateInput){
if(!this.dateSupported){
$dateInput.next(".dateWarning").remove()
;var date=$dateInput.val(),isValid=this.isValidDate(date)
;if(!isValid)$dateInput.after('<div class="text-danger dateWarning">Enter date as "YYYY-MM-DD"</div>')
;$dateInput.datepicker({dateFormat:"yy-mm-dd"
}),this.resize()}},setUpInitialState:function(){
$(".myLeftCol").addClass("col-12 col-sm-6 col-md-4 col-lg-3 text-left text-sm-right"),
this.isDateSupported(),
this.isTimeSupported(),$("input[type='date']").prop("placeholder","YYYY-MM-DD").on("change",e=>{
this.checkDateFormat($(e.currentTarget))
}),$("input[type='time']").prop("placeholder","hh:mm").on("change",e=>{
this.checkTimeFormat($(e.target))
}),$("textarea.autoAdjust").each((i,e)=>{
e.setAttribute("style","height:"+e.scrollHeight+"px;overflow-y:hidden;")
}).on("input",e=>{
e.target.style.height="auto",e.target.style.height=e.target.scrollHeight+"px",
this.resize()}),$(".toggleTable").on("click",e=>{
var tableID=$(e.currentTarget).data("table"),$table=$("."+tableID).find("table"),$errorMsg=$("#errorMsg")
;this.toggleTableFuncs($table,$errorMsg)
}),$(".toCSV").on("click",e=>{
var tableID=$(e.currentTarget).data("table"),dateToday=luxon.DateTime.now().toISODate(),fileName="table_"+tableID+"_"+dateToday,$errorMsg=$("#errorMsg")
;this.toCSVFuncs(fileName,tableID,$errorMsg)
}),$(".copyData").on("click",e=>{
var tableID=$(e.currentTarget).data("table"),tableSearch=this.tableSearch(tableID),$copyHead=$(".copyHead"+tableSearch),$transpose=$(".transpose"+tableSearch),$tableToCopy=$("."+tableID).find("table"),$tableDiv=$tableToCopy.parent(),$errorMsg=$("#errorMsg"),$divForCopy=$("#forCopy")
;this.copyDataFuncs($copyHead,$tableToCopy,$tableDiv,$errorMsg,$divForCopy,$transpose)
}),$(".addMouse").on("click",e=>{
var genNum=this.getNextNum(this.mouseNums)
;this.addMouse(genNum)
}),$(".addTrtGroup").on("click",e=>{
var genNum=this.getNextNum(this.trtGroupNums)
;this.addTrtGroup(genNum)
}),$("#collapseMice").on("click",e=>{
this.collapseAllMiceCards()
}),$("#the_form").on("input",e=>{
if($(e.target).data("watch"))this.watchValue($(e.target));else this.updateCalcFromEl(e.target)
}).on("change",e=>{}),
$("input, select, textarea").each((i,e)=>{
if("button"!=$(e).attr("type"))if($(e).data("watch"))this.watchValue($(e));else this.updateCalcFromEl(e)
});var dateToday=luxon.DateTime.now().toISODate()
;$("#dueDate").val(dateToday).each((i,e)=>{}),
$(".htmlCardHeader").on("click",e=>{
this.toggleCard($(e.currentTarget))
}),$("#convertToTable").on("click",e=>{
var tableText=$("#pasteField").val(),makeFirstColHead=false,makeFirstRowHead=false
;if($("#makeColHead").is(":checked"))makeFirstColHead=true
;if($("#makeRowHead").is(":checked"))makeFirstRowHead=true
;var $divForTable=$(".forTable")
;this.rebuildTableFromStr(tableText,makeFirstRowHead,makeFirstColHead,$divForTable)
}),$("#upload").on("click",e=>{this.upload()
}),$("#preview").on("click",e=>{this.preview()
}),$(".initialMass").each((i,e)=>{
var damNum=$(e).data("dam"),breedNum=$(e).data("breed")
;this.calcMassChange(damNum,breedNum)
}),$(".filter").on("input",e=>{
var type=$(e.currentTarget).data("filter")
;if("region"==type)this.makeRegionsTable();else this.makeMouseTable()
}),$("#resetFilter").on("click",e=>{
this.resetFilter()
}),this.resetFilter(),$("#resetMouseFilter").on("click",e=>{
this.resetMouseFilter()
}),this.resetMouseFilter(),$("#showPerfusion").on("click",e=>{
$(".perfusionInfo").show().find("textarea.autoAdjust").each((i,e)=>{
if(!$(e).is(":hidden"))e.setAttribute("style","height:"+e.scrollHeight+"px;overflow-y:hidden;")
}),this.resize()
}),$("#hidePerfusion").on("click",e=>{
$(".perfusionInfo").hide(),this.resize()
}),$(".perfusionInfo").hide(),$("#showRegions").on("click",e=>{
$(".regDiv").show().find("textarea.autoAdjust").each((i,e)=>{
if(!$(e).is(":hidden"))e.setAttribute("style","height:"+e.scrollHeight+"px;overflow-y:hidden;")
}),this.resize()
}),$("#hideRegions").on("click",e=>{
$(".regDiv").hide(),this.resize()
}),$(".clearRegionEdit").on("click",e=>{
$(".whichRegion").text(""),$(".regionNotes").text("")
}),$(".whichRegion").text(""),
$(".regionNotes").text(""),$(".regDiv").hide(),this.resize()
},regDivOn:false,
updateTextarea:function(textarea){
if(!$(textarea).is(":hidden"))textarea.setAttribute("style","height:"+textarea.scrollHeight+"px;overflow-y:hidden;")
;this.resize()},getCheckState:function($el){
var checkState=false
;if($el.is(":checked"))checkState=true
;return checkState},resize:function(){
this.parent_class.resize_container()},
checkForNames:function(){
$("input, select, textarea").each((i,e)=>{
var thisName=$(e).attr("name")
;if(!thisName)console.log("There is no name attribute for: ",e.id);else{
var hasUpper=/[A-Z]/.test(thisName)
;if(hasUpper)console.log("The name contains an uppercase letter for: ",e.id)
}})},getDynamicContent:function(){
var dynamicContent={};return dynamicContent},
data_valid_form:function($errorMsg){
var valid=true,fail_log=$("<div></div>").append("Missing values for:"),name
;if($(".needForTable").each((i,e)=>{
if(!$(e).val())valid=false,name=$(e).attr("id"),
fail_log.append("<br/>"+name)
}),!valid)$errorMsg.html("<span style='color:red; font-size:36px;'>"+"Please fill out all elements marked by a"+"</span><span style='color:blue; font-size:36px;'>"+" blue #"+"</span>"),
$errorMsg.append(fail_log);else $errorMsg.html("")
;return this.resize(),valid},
runIfConfirmed:function(text,functionToCall,elForHeight=null){
var thisMessage="Are you sure?"
;if(text)thisMessage=text;var top="auto"
;if(elForHeight)top=elForHeight.offsetTop+"px"
;bootbox.confirm({message:thisMessage,
callback:proceed=>{if(proceed)functionToCall()}
}),$(".modal-dialog").css("top",top)},
dialogConfirm:function(text,functionToCall,elForHeight=null){
var thisMessage="Do you want to proceed?"
;if(text)thisMessage=text;var top="auto"
;if(elForHeight)top=elForHeight.offsetTop+"px"
;bootbox.confirm({message:thisMessage,
callback:result=>{functionToCall(result)}
}),$(".modal-dialog").css("top",top)},
runBasedOnInput:function(prompt,functionToCall,elForHeight=null){
var thisTitle="Enter value:"
;if(prompt)thisTitle=prompt;var top="auto"
;if(elForHeight)top=elForHeight.offsetTop+"px"
;bootbox.prompt({title:thisTitle,
callback:result=>{functionToCall(result)}
}),$(".modal-dialog").css("top",top)},
checkInArray:function(searchVal,array){
var proceed=-1!==$.inArray(searchVal,array)
;return proceed},
dataSearch:function(dataName,dataValue){
var dataSearch="[data-"+dataName+"='"+dataValue+"']"
;return dataSearch},tableSearch:function(table){
var str=this.dataSearch("table",table);return str
},calcSearch:function(calc){
var str=this.dataSearch("calc",calc);return str},
daySearch:function(day){
var str=this.dataSearch("day",day);return str},
mouseSearch:function(mouse){
var str=this.dataSearch("mouse",mouse);return str
},trtGroupSearch:function(trtGroup){
var str=this.dataSearch("trtgroup",trtGroup)
;return str},regSearch:function(regNum){
var str=this.dataSearch("reg",regNum);return str},
plugSearch:function(plugNum){
var str=this.dataSearch("plug",plugNum);return str
},massSearch:function(massNum){
var str=this.dataSearch("mass",massNum);return str
},updateCalcFromEl:function(el){
var calc=el.id,val=el.value,calcSearch=this.calcSearch(calc)
;$(calcSearch).html(val),this.resize()},
updateCalcFromVal:function(calc,val){
var calcSearch=this.calcSearch(calc)
;$(calcSearch).text(val),this.resize()},
watchValue:function($el){
var watch=$el.data("watch"),calcSearch=this.calcSearch(watch),mouseNum=$el.data("mouse"),trtGroupNum=$el.data("trtgroup"),val=$el.val()
;if(mouseNum)calcSearch+=this.mouseSearch(mouseNum)
;if(trtGroupNum)calcSearch+=this.trtGroupSearch(trtGroupNum)
;if("mouseID"==watch)if(!val)val="Mouse "+mouseNum
;$(calcSearch).text(val),this.resize()},
toggleTableFuncs:function($table,$errorMsg){
this.data_valid_form($errorMsg),$table.toggle(),
this.resize()},
toCSVFuncs:function(fileName,tableID,$errorMsg){
var data_valid=this.data_valid_form($errorMsg)
;if(data_valid)this.exportTableToCSV(fileName,tableID),
$errorMsg.html("<span style='color:grey; font-size:24px;'>Saved successfully</span>");else $errorMsg.append("<br/><span style='color:grey; font-size:24px;'>Did not export</span>")
},downloadCSV:function(csv,filename){
var csvFile,dLink;csvFile=new Blob([csv],{
type:"text/csv"
}),dLink=document.createElement("a"),dLink.download=filename,dLink.href=window.URL.createObjectURL(csvFile),
dLink.style.display="none",
document.body.appendChild(dLink),dLink.click()},
exportTableToCSV:function(filename,table){
var tableArray=this.getTableArray($("."+table).find("table"),copyHead=true,transpose=false),tableString=this.convertRowArrayToString(tableArray,",","\n")
;this.downloadCSV(tableString,filename)},
copyDataFuncs:function($copyHead,$tableToCopy,$tableDiv,$errorMsg,$divForCopy,$transpose){
var data_valid=this.data_valid_form($errorMsg),copyHead=false,transpose=false
;if($copyHead.is(":checked"))copyHead=true
;if($transpose.is(":checked"))transpose=true
;if(data_valid)$tableDiv.show(),this.resize(),
this.copyTable($tableToCopy,copyHead,$divForCopy,$errorMsg,transpose),
$errorMsg.html("<span style='color:grey; font-size:24px;'>Copied successfully</span>");else $errorMsg.append("<br/><span style='color:grey; font-size:24px;'>Nothing was copied</span>")
},
copyTable:function($table,copyHead,$divForCopy,$errorMsg,transpose){
var tableArray=this.getTableArray($table,copyHead,transpose),tableString=this.convertRowArrayToString(tableArray,"\t","\n")
;this.copyStringToClipboard(tableString,$divForCopy,$errorMsg)
},
getTableArray:function($table,copyHead,transpose){
var rows=[],rowNum=0
;if(copyHead)$table.find("thead").children("tr").each((i,e)=>{
if(transpose)rowNum=0
;if($(e).find("td, th").each((i,e)=>{
if(void 0===rows[rowNum])rows[rowNum]=[]
;var dontCopy=$(e).hasClass("noCopy")
;if(!dontCopy)if(rows[rowNum].push($(e).text()),
transpose)rowNum++}),!transpose)rowNum++})
;return $table.find("tbody").children("tr").each((i,e)=>{
if(transpose)rowNum=0
;if($(e).find("td, th").each((i,e)=>{
var dontCopy=$(e).hasClass("noCopy")
;if(!dontCopy){
if(void 0===rows[rowNum])rows[rowNum]=[]
;if(rows[rowNum].push($(e).text()),transpose)rowNum++
}}),!transpose)rowNum++}),rows},
convertRowArrayToString:function(rowArray,cellSepString="\t",newRowString="\n"){
var rowString=[];rowArray.forEach(row=>{
if(row.length)row.forEach((cell,i)=>{
if(cell.includes(cellSepString)||cell.includes(newRowString))row[i]='"'+cell+'"'
}),rowString.push(row.join(cellSepString))})
;var tableString=rowString.join(newRowString)
;return tableString},
copyStringToClipboard:function(textStr,$divForCopy,$errorMsg){
var $temp=$("<text"+"area style='opacity:0;'></text"+"area>")
;if(textStr)errorStr="Copy attempted",
$errorMsg.html("<span style='color:grey; font-size:24px;'>Copy attempted</span>");else textStr=" ",
$errorMsg.html("<span style='color:red; font-size:24px;'>Nothing to copy</span>")
;$temp.text(textStr),
$temp.appendTo($divForCopy).select(),document.execCommand("copy"),
$temp.remove(),this.resize()},
toggleCard:function($cardHead){
$cardHead.next().toggleClass("collapse"),$cardHead.next().find("textarea.autoAdjust").each((i,e)=>{
if(!$(e).is(":hidden"))e.setAttribute("style","height:"+e.scrollHeight+"px;overflow-y:hidden;")
}),this.resize()},collapseAllMiceCards:function(){
$(".mouseCard").find(".card-header").each((i,e)=>{
$(e).next().addClass("collapse")}),this.resize()},
makeCard:function($div,cardHeadContent,cardBodyContent){
$div.append($("<div></div>",{class:"card"
}).append($("<button></button>",{type:"button",
class:"card-header"}).on("click",e=>{
this.toggleCard($(e.currentTarget))
}).append(cardHeadContent)).append($("<div></div>",{
class:"card-body collapse"
}).append(cardBodyContent))),this.resize()},
addMouse:function(mouseNum){
var inArray=this.checkInArray(mouseNum,this.mouseNums)
;if(!inArray)this.mouseNums.push(mouseNum),
this.mice[mouseNum]={regNums:[],regs:{}
},this.makeMouseCard(mouseNum),this.makeMouseTable()
},makeMouseCard:function(mouseNum){
var $div=$("#mouseCardDiv")
;if(!$div.find(".card").length)$div.html("")
;var row="row mt-2",col="col-12 col-lg-6"
;$div.append($("<div/>",{
class:"col-12 col-lg-6 mt-2 mouseCard",
"data-mouse":mouseNum}))
;var $mouseDiv=$(".mouseCard"+this.mouseSearch(mouseNum)),header=$("<div></div>",{
class:"mouseIDCalc","data-calc":"mouseID",
"data-mouse":mouseNum
}).append("Mouse "+mouseNum),$body=this.makeMouseCardBody(mouseNum)
;this.makeCard($mouseDiv,header,$body),
this.makeTrtGroupList(mouseNum),$("#mouseSelect").append($("<option></option>",{
value:mouseNum,class:"mouseIDCalc",
"data-calc":"mouseID","data-mouse":mouseNum
}).append("Mouse "+mouseNum)).attr("size",Math.min(this.mouseNums.length,15))
},makeMouseCardBody:function(mouseNum){
var $body=$("<div></div>"),initialRows=[{
label:"<h4>Mouse ID:</h4>",type:"text",
className:"mouseID",addRowClass:"updateMouseObj"
},{label:"<h5>Cycle ID#</h5>",type:"number",
className:"cycleID",addRowClass:"updateMouseObj"
},{label:"Delete:",type:"button",
className:"deleteMouse",addRowClass:"hideView"},{
label:"Trt group:",type:"select",
className:"trtGroup",addRowClass:"updateMouseObj",
optionsObj:[{value:"",text:"[Select]"}]},{
label:"Date of sacrifice:",type:"date",
className:"sacDate",addRowClass:"updateMouseObj"
},{label:"Time of transport:",type:"time",
className:"transportTime",
addRowClass:"updateMouseObj perfusionInfo"},{
label:"Time of sacrifice:",type:"time",
className:"sacTime",
addRowClass:"updateMouseObj perfusionInfo"},{
label:"Uterine description:",type:"textarea",
className:"uterineDesc",
addRowClass:"updateMouseObj perfusionInfo"},{
label:"Time of saline:",type:"time",
className:"salineTime",
addRowClass:"updateMouseObj perfusionInfo"},{
label:"Time of perfusion:",type:"time",
className:"perfusionTime",
addRowClass:"updateMouseObj perfusionInfo"},{
label:"Liver cleared?",type:"checkbox",
className:"liverCleared",
addRowClass:"updateMouseObj perfusionInfo"},{
label:"Movement with formalin?",type:"checkbox",
className:"formalinMovement",
addRowClass:"updateMouseObj perfusionInfo"},{
label:"Time of brain extraction:",type:"time",
className:"extractionTime",
addRowClass:"updateMouseObj perfusionInfo"},{
label:"Time vial changed to sucrose:",type:"time",
className:"sucroseTime",
addRowClass:"updateMouseObj perfusionInfo"},{
label:"Date sectioned:",type:"date",
className:"sectionDate",
addRowClass:"updateMouseObj"},{
label:"Section thickness (&micro;m):",
type:"number",className:"sectionSize",
addRowClass:"updateMouseObj",value:30},{
label:"Add region series:",type:"button",
className:"addRegionSeries",addRowClass:"hideView"
},{label:"Notes:",type:"textarea",
className:"genNotes",addRowClass:"updateMouseObj"
}]
;for(row of initialRows)$body.append(this.makeRowFromObj(row,mouseNum,"mouse"))
;return $body.find(".deleteMouse").prop("value","Delete Mouse").on("click",e=>{
this.deleteMouse(mouseNum)
}),$body.find(".addRegionSeries").prop("value","Add region series").on("click",e=>{
this.addRegionSeries(mouseNum)
}),$body.find(".extractionTime").parent().append("Change to sucrose at <span class='fillTime purple' data-time='01:30'>{Enter Time}</span>"),
$body.find(".extractionTime").on("input",e=>{
this.watchTimeNextEl($(e.currentTarget))
}).each((i,e)=>{this.watchTimeNextEl($(e))
}),$body.find(".deleteMouse").prop("value","Delete Mouse").on("click",e=>{
this.deleteMouse(mouseNum)
}),$body.find(".updateMouseObj").on("change",e=>{
var $el=$(e.target)
;this.updateObjFromVal($el,this.mice[mouseNum]),this.updateMouseList(mouseNum),
this.makeRegionsTable(),this.makeMouseTable()
}),$body},watchTimeNextEl:function($elToWatch){
var $elToFill=$elToWatch.next($(".fillTime"))
;this.watchTime($elToWatch,$elToFill)},
watchTime:function($elToWatch,$elToFill){
var addTime=$elToFill.data("time"),startTime=$elToWatch.val()
;if(startTime){var time=new Date
;startTimeSplit=this.getHoursMin(startTime),addTimeSplit=this.getHoursMin(addTime),
time.setHours(startTimeSplit.hours,startTimeSplit.mins,0,0),
time.setHours(time.getHours()+addTimeSplit.hours),
time.setMinutes(time.getMinutes()+addTimeSplit.mins),
$elToFill.text(time.toLocaleTimeString())
}else $elToFill.text("{Enter Start Time}")
;this.resize()},getHoursMin:function(timeString){
timeString=timeString.split(":")
;var hours=parseInt(timeString[0],10),mins=parseInt(timeString[1],10)
;return split={hours:hours,mins:mins}},
updateObjFromVal:function($el,obj){
var val=$el.val(),elType=$el.attr("type"),valSafe
;if("checkbox"==elType)valSafe=$el.is(":checked");else valSafe=this.encodeHTML(val)
;var thisProp=$el.data("watch")
;if(thisProp)obj[thisProp]=valSafe},
encodeHTML:function(dirtyString){
var container=document.createElement("div"),text=document.createTextNode(dirtyString)
;return container.appendChild(text),
container.innerHTML},
makeRow:function(label,$input,addRowClass=""){
var myLeftCol="col-12 col-lg-6"
;if(addRowClass)addRowClass=" "+addRowClass
;var $label=$("<label></label>",{
for:$input.attr("id")
}).append(label),$row=$("<div></div>",{
class:"row mt-2"+addRowClass
}).append($("<div></div>",{class:myLeftCol
}).append($label)).append($("<div></div>",{
class:"col"}).append($input));return $row},
makeMouseList:function(damNum){
var mouseNums=this.mouseNums,mice=this.mice
;for(mouseNum of mouseNums){
var mouse=mice[mouseNum],mouseInfo="",mouseID=mouse.mouseID
;if(!mouseID)mouseID="Mouse "+mouseNum
;mouseInfo=mouseID}},
updateMouseList:function(mouseNum){
var mice=this.mice,mouse=mice[mouseNum],mouseInfo="",mouseID=mouse.mouseID
;if(!mouseID)mouseID="Mouse "+mouseNum
;mouseInfo=mouseID
;var $option=$(".mouse").find("option[value='"+mouseNum+"']")
},addTrtGroup:function(trtGroupNum){
var inArray=this.checkInArray(trtGroupNum,this.trtGroupNums)
;if(!inArray)this.trtGroupNums.push(trtGroupNum),
this.trtGroups[trtGroupNum]={trt:null,time:null
},this.makeTrtGroupCard(trtGroupNum)},
makeTrtGroupCard:function(trtGroupNum){
var $div=$("#trtGroupsCardDiv")
;if(!$div.find(".card").length)$div.html("")
;var row="row mt-2",col="col-12 col-lg-6"
;$div.append($("<div/>",{
class:"col col-md-6 mt-2 trtGroupCard",
"data-trtgroup":trtGroupNum}))
;var $sireDiv=$(".trtGroupCard"+this.trtGroupSearch(trtGroupNum)),header=$("<div></div>",{
class:"trtGroupCalc","data-calc":"trtGroup",
"data-trtgroup":trtGroupNum
}).append("Treatment group "+trtGroupNum),$body=this.makeTrtGroupCardBody(trtGroupNum)
;this.makeCard($sireDiv,header,$body),
this.updateTrtGroupList(trtGroupNum)},
makeTrtGroupList:function(mouseNum){
var trtGroupNums=this.trtGroupNums,trtGroups=this.trtGroups,mouseSearch=this.mouseSearch(mouseNum)
;for(trtGroupNum of trtGroupNums){
var trtGroup=trtGroups[trtGroupNum],trtInfo="",trt=trtGroup.trt
;if(!trt)trt="Trt: "+trtGroupNum;trtInfo=trt
;var time=trtGroup.time
;if(time)trtInfo+="; time: "+time
;$(".trtGroup"+mouseSearch).append($("<option></option>",{
value:trtGroupNum,"data-trtgroup":trtGroupNum
}).append(trtInfo))}},
updateTrtGroupList:function(trtGroupNum){
var trtGroups=this.trtGroups,trtGroup=trtGroups[trtGroupNum],trtInfo="",trt=trtGroup.trt
;if(!trt)trt="Trt: "+trtGroupNum;trtInfo=trt
;var time=trtGroup.time
;if(time)trtInfo+="; time: "+time
;var $option=$(".trtGroup").find("option[value='"+trtGroupNum+"']")
;if(0==$option.length)$(".trtGroup").append($("<option></option>",{
value:trtGroupNum,"data-trtgroup":trtGroupNum
}).append(trtInfo));else $option.text(trtInfo)
;$(".trtGroupCalc"+this.trtGroupSearch(trtGroupNum)).text(trtInfo)
},makeTrtGroupCardBody:function(trtGroupNum){
var $body=$("<div></div>"),initialRows=[{
label:"Treatment",type:"text",className:"trt",
addRowClass:" updateTrtGroupObj"},{label:"Time:",
type:"number",className:"time",
addRowClass:" updateTrtGroupObj"},{
label:"Delete:",type:"button",
className:"deleteTrtGroup",optionsObj:[],
addRowClass:" hideView"}]
;for(row of initialRows)$body.append(this.makeRowFromObj(row,trtGroupNum,"trtgroup"))
;return $body.find(".deleteTrtGroup").prop("value","Delete treatment group").on("click",e=>{
this.deleteTrtGroup(trtGroupNum)
}),$body.find(".showTrtGroupRegions").prop("value","Show trt group regions").on("click",e=>{
this.makeRegionsTable(trtGroupNum)
}),$body.find(".updateTrtGroupObj").on("change",e=>{
var $el=$(e.target)
;this.updateObjFromVal($el,this.trtGroups[trtGroupNum]),this.updateTrtGroupList(trtGroupNum)
}),$body},
makeInput:function(inputType,className,dataNum,optionsObj,dataName,addSecondData=false,secondDataNum=NaN,secondDataName=null,addThirdData=false,thirdDataNum=NaN,thirdDataName=null){
var lowerCaseName=className.toLowerCase()
;dataString="data-"+dataName.toLowerCase()
;var idNum=dataNum
;if(addSecondData)secondDataString="data-"+secondDataName.toLowerCase(),
idNum="a"+dataNum+"b"+secondDataNum
;if(addThirdData)thirdDataString="data-"+thirdDataName.toLowerCase(),
idNum+="c"+thirdDataNum;if("select"===inputType){
var selectObj={name:lowerCaseName+idNum,
id:className+idNum,
class:className+" fullWidth watch",
"data-watch":className}
;if(selectObj[dataString]=dataNum,addSecondData)selectObj[secondDataString]=secondDataNum
;if(addThirdData)selectObj[thirdDataString]=thirdDataNum
;for(option of($input=$("<select></select>",selectObj),
optionsObj))$input.append($("<option></option>",{
value:option.value}).append(option.text))
}else if("textarea"===inputType){var inputObj={
name:lowerCaseName+idNum,id:className+idNum,
class:className+" fullWidth watch autoAdjust",
"data-watch":className}
;if(inputObj[dataString]=dataNum,addSecondData)inputObj[secondDataString]=secondDataNum
;if(addThirdData)inputObj[thirdDataString]=thirdDataNum
;$input=$("<tex"+"tarea></tex"+"tarea>",inputObj).on("input",e=>{
this.updateTextarea(e.currentTarget)})}else{
var inputObj={type:inputType,
name:lowerCaseName+idNum,id:className+idNum,
class:className+" fullWidth watch",
"data-watch":className}
;if(inputObj[dataString]=dataNum,addSecondData)inputObj[secondDataString]=secondDataNum
;if(addThirdData)inputObj[thirdDataString]=thirdDataNum
;var $input=$("<input></input>",inputObj)}
if("time"===inputType)$input.each((i,e)=>{
this.checkTimeFormat($(e))}).on("change",e=>{
this.checkTimeFormat($(e.currentTarget))})
;if("date"===inputType)$input.each((i,e)=>{
this.checkDateFormat($(e))}).on("change",e=>{
this.checkDateFormat($(e.currentTarget))})
;return $input},
makeRowFromObj:function(obj,dataNum,dataName,addSecondData=false,secondDataNum=NaN,secondDataName=null){
var $row=this.makeRow(obj.label,this.makeInput(obj.type,obj.className,dataNum,obj.optionsObj,dataName,addSecondData,secondDataNum,secondDataName),obj.addRowClass)
;return $row},
deleteRegFuncs:function(mouseNum,regNum){
this.runIfConfirmed("Are you sure that you wish to delete this mouse reg?",()=>{
var thisMouse=this.mice[mouseNum],regNums=thisMouse.regNums,regs=thisMouse.regs,index=regNums.indexOf(regNum)
;if(index>-1)regNums.splice(index,1)
;delete regs[regNum]
;var mouseSearch=this.mouseSearch(mouseNum),regSearch=this.regSearch(regNum)
;$(mouseSearch+regSearch).remove()}),this.resize()
},deleteMouse:function(genNum){
this.runIfConfirmed("Are you sure that you wish to delete this mouse?",()=>{
var index=this.mouseNums.indexOf(genNum)
;if(index>-1)this.mouseNums.splice(index,1)
;delete this.mice[genNum]
;var mouseSearch=this.mouseSearch(genNum)
;$(".mouseCard"+mouseSearch).remove(),$(mouseSearch).remove()
}),this.resize()},deleteTrtGroup:function(genNum){
this.runIfConfirmed("Are you sure that you wish to delete this treatment?",()=>{
var index=this.trtGroupNums.indexOf(genNum)
;if(index>-1)this.trtGroupNums.splice(index,1)
;delete this.trtGroups[genNum]
;var trtGroupSearch=this.trtGroupSearch(genNum)
;$(".trtGroupCard"+trtGroupSearch).remove(),
$(trtGroupSearch).remove()}),this.resize()},
getNextNum:function(nums){
if(nums.length>0)var lastNum=nums[nums.length-1],num=lastNum+1;else var num=1
;return num},addRegionSeries:function(mouseNum){
var regNums=this.mice[mouseNum].regNums,mouseRegs=this.mice[mouseNum].regs,regNum=this.getNextNum(regNums),inArray=this.checkInArray(regNum,regNums)
;if(!inArray)regNums.push(regNum),
mouseRegs[regNum]={region:null,series:null
},this.makeRegionSeries(mouseNum,regNum),
this.makeRegionsTable()},
makeRegionSeries:function(mouseNum,regNum){
var mouseSearch=this.mouseSearch(mouseNum),$cardBody=$(".mouseCard"+mouseSearch).find(".card-body"),initialRows=[{
label:"Delete:",type:"button",
className:"deleteReg",optionsObj:[],
addRowClass:"hideView"},{label:"Region:",
type:"text",className:"region",
addRowClass:"updateRegObj"},{label:"Series:",
type:"text",className:"series",
addRowClass:"updateRegObj"}]
;$cardBody.append($("<div></div>",{class:"regDiv",
"data-reg":regNum,"data-mouse":mouseNum
}).append($("<hr></hr>")))
;var $body=$cardBody.find(".regDiv").show().last()
;for(row of initialRows)$body.append(this.makeRowFromObj(row,mouseNum,"mouse",true,regNum,"reg"))
;$body.find(".deleteReg").prop("value","Delete region/series").on("click",e=>{
this.deleteRegFuncs(mouseNum,regNum)
}),$body.find(".copyReg").prop("value","Copy region/series").on("click",e=>{
this.copyMouseRegToClipboard(mouseNum,regNum)
}),$body.find(".updateRegObj").on("change",e=>{
var $el=$(e.target),val=$el.val()
;valSafe=this.encodeHTML(val)
;var thisProp=$el.data("watch")
;this.mice[mouseNum].regs[regNum][thisProp]=valSafe,
this.makeRegionsTable()}),this.resize()},
makeTopLabelRow:function(labels){
var $cardDiv=$("<div></div>",{
class:"card d-none d-md-flex topLabelRow"
}).append($("<div></div>",{class:"row"
}).append($("<div></div>",{
class:"col-12 row labelRow"
}))),numLabels=labels.length,colText="col-"+Math.floor(12/numLabels)
;for(label of labels)$cardDiv.find(".labelRow").append($("<div></div>",{
class:"font-weight-bold "+colText}).append(label))
;return $cardDiv},makeMouseTable:function(){
var mice=this.mice,mouseNums=this.mouseNums,labels=this.mouseLabels
;const tableData=[labels]
;for(mouseNum of mouseNums){
var mouseInfo=mice[mouseNum],info=this.getMouseInfo(mouseNum),proceed=this.filterMouseData(info,mouseInfo.trtGroup)
;if(proceed){var row=[],val;for(label of labels){
if(val=info[label],!val)val="";row.push(val)}
tableData.push(row)}}
console.log(tableData),$tableDiv=$(".mouseFilterTable"),this.createTable(tableData,true,false,$tableDiv),
this.resize()},makeRegionsTable:function(){
var mice=this.mice,mouseNums=this.mouseNums,labels=this.regLabels
;const tableData=[labels],regionAddedNums=[]
;for(mouseNum of mouseNums){
var mouseInfo=mice[mouseNum],regNums=mouseInfo.regNums
;for(regNum of regNums){
var regInfo=this.getRegInfo(mouseNum,regNum),proceed=this.filterData(regInfo,mouseInfo.trtGroup)
;if(proceed){var row=[],val;for(label of labels){
if(val=regInfo[label],!val)val="";row.push(val)}
tableData.push(row),regionAddedNums.push({
mouseNum:mouseNum,regNum:regNum})}}}
if($tableDiv=$(".filterTable"),this.createTable(tableData,true,false,$tableDiv),
"view"!==this.mode&&"view_dev"!==this.mode)$tableDiv.find("tr").each((i,e)=>{
if(0==i)$(e).append($("<th></th>",{class:"noCopy"
}).append("Edit"));else{
var added=regionAddedNums[i-1],mouseNum=added.mouseNum,regNum=added.regNum
;$(e).append($("<td></td>",{class:"noCopy"
}).append($("<input></input>",{
"data-mouse":mouseNum,"data-reg":regNum,
value:"Edit region/series info",
id:"editReg"+mouseNum+regNum,class:"editReg",
type:"button"}).on("click",e=>{
var mouseNum=$(e.currentTarget).data("mouse"),regNum=$(e.currentTarget).data("reg")
;this.editRegFuncs(mouseNum,regNum)})))}})
;this.resize()},
editRegFuncs:function(mouseNum,regNum){
console.log("mouseNum",mouseNum,"regNum",regNum),
this.editRegionSeries(mouseNum,regNum)},
editRegionSeries:function(mouseNum,regNum){
var $div=$(".regionNotes");$div.text("")
;var initialRows=[{label:"IHC date",type:"date",
className:"IHCDate",addRowClass:"updateRegObj"},{
label:"IHC notes",type:"textarea",
className:"IHCNotes",addRowClass:"updateRegObj"},{
label:"slide numbers",type:"text",
className:"slideNums",addRowClass:"updateRegObj"
},{label:"Image date",type:"date",
className:"imageDate",addRowClass:"updateRegObj"
},{label:"Image notes",type:"textarea",
className:"IHCNotes",addRowClass:"updateRegObj"},{
label:"Quantified date",type:"date",
className:"quantifiedDate",
addRowClass:"updateRegObj"},{label:"Region notes",
type:"textarea",className:"regNotes",
addRowClass:"updateRegObj"}]
;for(row of initialRows)$div.append(this.makeRowFromObj(row,mouseNum,"mouse",true,regNum,"reg"))
;$div.find(".updateRegObj").on("change",e=>{
var $el=$(e.target),val=$el.val()
;valSafe=this.encodeHTML(val)
;var thisProp=$el.data("watch")
;this.mice[mouseNum].regs[regNum][thisProp]=valSafe,
this.makeRegionsTable()}).each((i,e)=>{
var $el=$(e).find(".watch"),thisProp=$el.data("watch"),currentVal=this.mice[mouseNum].regs[regNum][thisProp]
;if(currentVal)$el.val(currentVal)})
;var regInfo=this.getRegInfo(mouseNum,regNum),printInfo=regInfo.mouseID+"; region: "+regInfo.region+"; series: "+regInfo.series
;$(".whichRegion").text(""),
$(".whichRegion").append($("<h4></h4").append(printInfo)),
this.resize()},
makeSingleRegionTable:function(mouseNum,regNum){
var labels=this.regLabels;const tableData=[labels]
;var regInfo=this.getRegInfo(mouseNum,regNum),row=[],val
;for(label of labels){
if(val=regInfo[label],!val)val="";row.push(val)}
tableData.push(row),$tableDiv=$(".mouseTable"),
this.createTable(tableData,true,false,$tableDiv)},
regLabels:["mouseID","trt","time","region","series","IHCDate","IHCNotes","slideNums","imageDate","quantifiedDate","regNotes"],
getRegInfo:function(mouseNum,regNum){
var mouse=this.mice[mouseNum],reg=mouse.regs[regNum],mouseID=mouse.mouseID
;if(!mouseID)mouseID="M"+mouseNum
;var trtGroup=mouse.trtGroup,trt,time
;if(trtGroup)trt=this.trtGroups[trtGroup].trt,
time=this.trtGroups[trtGroup].time
;var labels=this.regLabels,regObj={
mouseID:mouseID,trt:trt,time:time}
;for(label of labels.slice(3)){
if(val=reg[label],!val)val=null;regObj[label]=val}
return regObj},resetFilter:function(){
this.resetFilterSelections(),this.makeRegionsTable()
},resetFilterSelections:function(){
$("#mouseFilter").val(""),$("#trtGroupFilter").find("option").prop("selected",false),
$("#regionFilter").val(""),
$("#seriesFilter").val(""),$("#IHCFilter").val("valid"),
$("#imageFilter").val("either"),
$("#quantifiedFilter").val("either")},
trtGroupLabels:["trt","time"],
mouseLabels:["mouseID","cycleID","trt","time","sacDate","transportTime","sacTime","uterineDescription","salineTime","perfusionTime","liverCleared","formalinMovement","extractionTime","sucroseTime","sectionDate","sectionSize"],
resetMouseFilter:function(){
this.resetMouseFilterSelections(),this.makeMouseTable()
},resetMouseFilterSelections:function(){
$("#mouseFilter2").val(""),$("#trtGroupFilter2").find("option").prop("selected",false),
$("#sectionedFilter").val("either")},
getMouseInfo:function(mouseNum){
var mouse=this.mice[mouseNum],mouseID=mouse.mouseID
;if(!mouseID)mouseID="M"+mouseNum
;var trtGroup=mouse.trtGroup,trt="",time=""
;if(trtGroup)trt=this.trtGroups[trtGroup].trt,
time=this.trtGroups[trtGroup].time
;var labels=this.mouseLabels,mouseObj={
mouseID:mouseID,cycleID:mouse.cycleID,trt:trt,
time:time};for(label of labels.slice(4)){
if(val=mouse[label],!val)val=null
;mouseObj[label]=val}return mouseObj},
filterMouseData:function(info,trtGroup){
var mouseFilter=$("#mouseFilter2").val(),trtGroupFilter=$("#trtGroupFilter2").val(),sectionedFilter=$("#sectionedFilter").val(),keepMouse=false
;if(this.matchesName(info.mouseID,mouseFilter)&&this.matchesFilter(trtGroup,trtGroupFilter)&&this.matchesDate(info.sectionDate,sectionedFilter))keepMouse=true
;return keepMouse},
filterData:function(info,trtGroup){
var mouseFilter=$("#mouseFilter").val(),trtGroupFilter=$("#trtGroupFilter").val(),regionFilter=$("#regionFilter").val(),seriesFilter=$("#seriesFilter").val(),IHCFilter=$("#IHCFilter").val(),imageFilter=$("#imageFilter").val(),quantifiedFilter=$("#quantifiedFilter").val(),keepReg=false
;if(this.matchesName(info.mouseID,mouseFilter)&&this.matchesFilter(trtGroup,trtGroupFilter)&&this.matchesName(info.region,regionFilter)&&this.matchesName(info.series,seriesFilter)&&this.matchesDate(info.IHCDate,IHCFilter)&&this.matchesDate(info.imageDate,imageFilter)&&this.matchesDate(info.quantifiedDate,quantifiedFilter))keepReg=true
;return keepReg},
matchesFilter:function(thisVal,matchArray){
var matches=false;if(matchArray){
if(!thisVal)thisVal=""
;var matches=this.checkInArray(thisVal,matchArray)
}else matches=true;return matches},
matchesName:function(thisVal,matchString){
var matches=false;if(matchString){if(thisVal){
if(matchArray=thisVal.match(matchString),
matchArray)matches=true
}else if(matchArray="".match(matchString),matchArray)matches=true
}else matches=true;return matches},
matchesDate:function(thisVal,dateType){
var matches=false
;if("either"==dateType)matches=true;else{
var thisDateType="invalid"
;if(thisVal)if(this.isValidDate(thisVal))thisDateType="valid"
;if(dateType==thisDateType)matches=true}
return matches},
copyDamBreedingToClipboard:function(damNum,breedingNum,copyLabels=false){
var damObj=this.getDamBreedingInfo(damNum,breedingNum)
;const tableArray=[],rowArray=[]
;if(copyLabels)tableArray.push(this.damBreedingLabels)
;for(label of this.damBreedingLabels){
var val=damObj[label];if(!val)val=""
;rowArray.push(""+val)}tableArray.push(rowArray)
;var tableString=this.convertRowArrayToString(tableArray,"\t","\n"),$divForCopy=$("#forCopy"),$errorMsg=$("#errorMsg")
;this.copyStringToClipboard(tableString,$divForCopy,$errorMsg)
},getDamNamesArray:function(damNumArray){
var names=[];for(damNum of damNumArray){
var thisID=this.dams[damNum].damID
;if(!thisID)thisID="Dam "+damNum
;names.push(thisID)}return names},
printDams:function(damsArray,$div){
damsArrayClean=this.encodeHTML(damsArray).split(","),
$div.html(damsArrayClean.join("<br/>"))},
addDays:function($startDateVal,numDays){
var newDate=luxon.DateTime.fromISO($startDateVal).plus({
days:numDays}).toISODate();return newDate},
createTable:function(tableData,makeFirstRowHead=false,makeFirstColHead=false,$tableDiv){
var table=document.createElement("table")
;table.classList.add("table")
;var tableBody=document.createElement("tbody")
;if(makeFirstRowHead)var thead=document.createElement("thead")
;if(tableData.forEach((rowData,rowNum)=>{
var row=document.createElement("tr")
;if(rowData.forEach((cellData,colNum)=>{
if(makeFirstRowHead&&0==rowNum||makeFirstColHead&&0==colNum)var cell=document.createElement("th");else var cell=document.createElement("td")
;cell.appendChild(document.createTextNode(cellData)),
row.appendChild(cell)
}),makeFirstRowHead&&0==rowNum)thead.appendChild(row),table.appendChild(thead);else tableBody.appendChild(row)
}),
table.appendChild(tableBody),void 0===$tableDiv||!$tableDiv)console.log("appending generally"),
document.body.appendChild(table);else $tableDiv.html(""),
$tableDiv.append(table);this.resize()},
rebuildTableFromStr:function(textStr,makeFirstRowHead,makeFirstColHead,$tableDiv){
var rowArray=this.makeArrayFromStr(textStr)
;if(this.addedTable=textStr,void 0===$tableDiv||!$tableDiv)this.createTable(rowArray,makeFirstRowHead,makeFirstColHead);else this.createTable(rowArray,makeFirstRowHead,makeFirstColHead,$tableDiv)
;this.resize()},
makeArrayFromStr:function(textStr){
var results=Papa.parse(textStr,{
skipEmptyLines:true});return results.data},
preview:function(){
var fileUpload=document.getElementById("fileUpload"),regex=/^([a-zA-Z0-9\s_\\.\-:])+(.csv|.txt)$/
;if(regex.test(fileUpload.value.toLowerCase()))if("undefined"!=typeof FileReader){
var reader=new FileReader;reader.onload=(e=>{
var csvText=e.target.result,makeFirstColHead=false,makeFirstRowHead=false
;if($("#makeColHead").is(":checked"))makeFirstColHead=true
;if($("#makeRowHead").is(":checked"))makeFirstRowHead=true
;var $divForTable=$(".forTable")
;this.rebuildTableFromStr(csvText,makeFirstRowHead,makeFirstColHead,$divForTable)
}),reader.readAsText(fileUpload.files[0])
}else bootbox.alert("This browser does not support HTML5.");else bootbox.alert("Please upload a valid CSV file.")
},addMouseFromTable:function(obj){
var mouseNum=this.getNextNum(this.mouseNums)
;this.addMouse(mouseNum)
;var mouseSearch=this.mouseSearch(mouseNum),headers=this.mouseLabels
;for(header of headers)$("."+header+mouseSearch).val(obj[header]),
this.mice[mouseNum][header]=obj[header]
;return this.updateMouseList(mouseNum),mouseNum},
addTrtGroupFromTable:function(obj){
var trtGroupNum=this.getNextNum(this.trtGroupNums)
;this.addTrtGroup(trtGroupNum)
;var trtGroupSearch=this.trtGroupSearch(trtGroupNum),headers=this.trtGroupLabels
;for(header of headers)$("."+header+trtGroupSearch).val(obj[header]),
this.trtGroups[trtGroupNum][header]=obj[header]
;return this.updateTrtGroupList(trtGroupNum),
trtGroupNum},
addDamFromTable:function(obj,headers){
var damNum=this.getNextNum(this.damNums)
;this.addDam(damNum)
;var damSearch=this.damSearch(damNum)
;for(header of headers){
var mouse,mouseDOB,mouseStrain
;if("damID"===header)$("."+header+damSearch).val(obj[header]),
this.dams[damNum][header]=obj[header];else if("mouse"===header||header.toLowerCase().includes("generation"))mouse=obj[header];else if("mouseDOB"===header||header.toLowerCase().includes("DOB"))mouseDOB=obj[header];else if("mouseStrain"===header||header.toLowerCase().includes("strain"))mouseStrain=obj[header]
}
var matchInfo=this.getMatchingObjSubset(this.mice,"mouse",mouse,"mouseDOB",mouseDOB,"mouseStrain",mouseStrain),dInfo=this.dams[damNum]
;if(matchInfo.matchingObj.length>0)$(".mouse"+damSearch).val(matchInfo.matchingObj[0]);else if(matchInfo.noMatches&&mouse){
var obj={mouse:mouse,mouseDOB:mouseDOB,
mouseStrain:mouseStrain
},genNum=this.addMouseFromTable(obj)
;$(".mouse"+damSearch).val(genNum)}
this.updateObjFromVal($(".mouse"+damSearch),this.dams[damNum])
},upload:function(){var tableStr=this.addedTable
;if(tableStr){var byHeader=Papa.parse(tableStr,{
skipEmptyLines:true,header:true
}),dataByHeader=byHeader.data,headers=byHeader.meta.fields
;if(headers.join("")===this.mouseLabels.join(""))for(obj of dataByHeader)this.addMouseFromTable(obj);else if(headers.join("")===this.trtGroupLabels.join(""))for(obj of dataByHeader)this.addTrtGroupFromTable(obj);else if("mouseID"===headers[0])for(obj of dataByHeader)this.addMouseFromTable(obj,headers);else bootbox.alert("Please use a table that has appropriate headers so that we know what to do with it")
}else bootbox.alert("Please either make an HTML table after pasting from Excel or preview a CSV file first")
},
getMatchingObjSubset:function(obj,firstMatchKey,firstMatchVal,secondMatchKey,secondMatchVal,thirdMatchKey,thirdMatchVal){
var noMatches=false,matchingObj,objAsArray=Object.entries(obj),matchFirstKeys=objAsArray.filter(d=>d[1][firstMatchKey]===firstMatchVal),matchingObjs=matchFirstKeys
;if(matchingObjs.length>1){
var matchSecondKeys=matchingObjs.filter(d=>d[1][secondMatchKey]===secondMatchVal)
;if(matchingObjs=matchSecondKeys,
matchingObjs.length>1){
var matchThirdKeys=matchingObjs.filter(d=>d[1][thirdMatchKey]===thirdMatchVal)
;matchingObjs=matchThirdKeys}
}else if(0===matchingObjs.length)noMatches=true
;if(1!==matchingObjs.length)matchingObj={};else matchingObj=matchingObjs[0]
;return{matchingObj:matchingObj,
noMatches:noMatches}}};