my_widget_script={damGenerationNums:[],
damGenerations:{},sireGenerationNums:[],
sireGenerations:{},damNums:[],dams:{},sireNums:[],
sires:{},mode:"edit",
init:function(mode,json_data){
this.include("https://code.jquery.com/jquery-3.5.1.min.js","sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=","anonymous",()=>{
$(document).ready(()=>{
this.include("https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js","sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl","anonymous",()=>{
$(document).ready(()=>{
this.include("https://cdn.jsdelivr.net/npm/luxon@1.26.0/build/global/luxon.min.js","sha256-4sbTzmCCW9LGrIh5OsN8V5Pfdad1F1MwhLAOyXKnsE0=","anonymous",()=>{
$(document).ready(()=>{
this.include("https://cdnjs.cloudflare.com/ajax/libs/bootbox.js/5.5.2/bootbox.min.js","sha512-RdSPYh1WA6BF0RhpisYJVYkOyTzK4HwofJ3Q7ivt/jkpW6Vc8AurL1R+4AUcvn9IwEKAPm/fk7qFZW3OuiUDeg==","anonymous",()=>{
$(document).ready(()=>{
this.include("https://cdnjs.cloudflare.com/ajax/libs/selectize.js/0.15.0/js/selectize.js","sha512-1HjnkKhHSDunRgIHRK4gXORl/T0WxhVkiQ5gjwvrH4yQK9RqPqYnPPwJfh+6gYTc/U9Cg8n4MGRZV1CzsP0UIA==","anonymous",()=>{
this.include("https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.2/papaparse.min.js","sha512-SGWgwwRA8xZgEoKiex3UubkSkV1zSE1BS6O4pXcaxcNtUlQsOmOmhVnDwIvqGRfEmuz83tIGL13cXMZn6upPyg==","anonymous",()=>{
$jq351=jQuery.noConflict(true),
this.myInit(mode,json_data)})})})})})})})})})})},
include:function(src,integrity,crossorigin,onload){
var head=document.getElementsByTagName("head")[0],script=document.createElement("script")
;script.setAttribute("integrity",integrity),
script.setAttribute("crossorigin",crossorigin),
script.src=src,script.type="text/javascript",
script.onload=script.onreadystatechange=function(){
if(script.readyState){
if("complete"===script.readyState||"loaded"===script.readyState)script.onreadystatechange=null,
onload()}else onload()},head.appendChild(script)},
myInit:function(mode,json_data){this.mode=mode
;var parsedJson=this.parseInitJson(json_data)
;this.initDynamicContent(parsedJson),
window.onresize=(()=>this.resize()),this.addEventListeners(),
this.parent_class.init(mode,()=>JSON.stringify(parsedJson.widgetData)),
this.addRequiredFieldIndicators(),
this.setUpInitialState(),this.adjustForMode(mode),
this.checkForNames()},to_json:function(){
var widgetJsonString=this.parent_class.to_json(),dynamicContent=this.getDynamicContent(),output={
widgetData:JSON.parse(widgetJsonString),
damGenerationNums:this.damGenerationNums,
damGenerations:this.damGenerations,
sireGenerationNums:this.sireGenerationNums,
sireGenerations:this.sireGenerations,
damNums:this.damNums,dams:this.dams,
sireNums:this.sireNums,sires:this.sires}
;return JSON.stringify(output)},
from_json:function(json_data){
var parsedJson=JSON.parse(json_data)
;this.parent_class.from_json(JSON.stringify(parsedJson.widgetData))
},test_data:function(){
var testData=JSON.parse(this.parent_class.test_data()),output={
widgetData:testData,damGenerationNums:[1],
damGenerations:{1:{damGen:123,
damGenDOB:"2022-11-01",damGenStrain:"CBA"}},
sireGenerationNums:[2],sireGenerations:{2:{
sireGen:234,sireGenDOB:"2022-11-02",
sireGenStrain:"GFP2"}}}
;return JSON.stringify(output)},
is_valid:function(b_suppress_message){
var fail=false,fail_log="",name
;if($("#the_form").find("select, textarea, input").each((i,e)=>{
if(!$(e).prop("required"));else if(!$(e).val())fail=true,
name=$(e).attr("id"),fail_log+=name+" is required \n"
}),$("input[type='date']").each((i,e)=>{
var date=$(e).val();if(date){
var validDate=this.isValidDate(date)
;if(!validDate)fail=true,fail_log+="Please enter valid date in form 'YYYY-MM-DD'"
}}),$("input[type='time']").each((i,e)=>{
var time=$(e).val();if(time){
var validtime=this.isValidTime(time)
;if(!validtime)fail=true,fail_log+="Please enter valid time in form 'hh:mm' - 24 hr time"
}}),fail)return bootbox.alert(fail_log);else{
var noErrors=[];return noErrors}},
is_edited:function(){
return this.parent_class.is_edited()},
reset_edited:function(){
return this.parent_class.reset_edited()},
parseInitJson:function(json_data){var jsonString
;if("string"===typeof json_data)jsonString=json_data;else jsonString=json_data()
;var parsedJson=JSON.parse(jsonString)
;return parsedJson},
initDynamicContent:function(parsedJson){
if(parsedJson.damGenerations)this.damGenerations=parsedJson.damGenerations
;if(parsedJson.damGenerationNums){
for(damGenerationNum of parsedJson.damGenerationNums)this.makeDamGenerationCard(damGenerationNum)
;this.damGenerationNums=parsedJson.damGenerationNums
}
if(parsedJson.sireGenerations)this.sireGenerations=parsedJson.sireGenerations
;if(parsedJson.sireGenerationNums){
for(sireGenerationNum of parsedJson.sireGenerationNums)this.makeSireGenerationCard(sireGenerationNum)
;this.sireGenerationNums=parsedJson.sireGenerationNums
}if(parsedJson.dams)this.dams=parsedJson.dams
;if(parsedJson.damNums){
for(damNum of parsedJson.damNums)this.makeDamCard(damNum)
;this.damNums=parsedJson.damNums}
if(parsedJson.sires)this.sires=parsedJson.sires
;if(parsedJson.sireNums){
for(sireNum of parsedJson.sireNums)this.makeSireCard(sireNum)
;this.sireNums=parsedJson.sireNums}},
adjustForMode:function(mode){
if("edit"!==mode&&"edit_dev"!==mode)$(".disableOnView").prop("disabled",true),
$("input[type='date']").not(".editOnView").removeClass(".hasDatePicker"),
$(".editOnView").prop("readonly","").prop("disabled",""),
$(".editOnView").find("option").prop("disabled",""),
$(".hideView").hide(),$("#dueDate").datepicker({
dateFormat:"yy-mm-dd"
}),$("#careDate").datepicker({
dateFormat:"yy-mm-dd"
});else $("input[type='date']").each((i,e)=>{
this.checkDateFormat($(e))
}),$("input[type='time']").each((i,e)=>{
this.checkTimeFormat($(e))})},
addEventListeners:function(){},
addRequiredFieldIndicators:function(){
$(".needForTableLab").each((i,e)=>{
$(e).html("<span class='hideView' style='color:blue'>#</span>"+$(e).html())
}),$(".requiredLab").each((i,e)=>{
$(e).html("<span class='hideView' style='color:red'>*</span>"+$(e).html())
})},isValidTime:function(timeString){
var regEx="^(((([0-1][0-9])|(2[0-3])):[0-5][0-9]))$"
;if(!timeString.match(regEx))return false;else return true
},isTimeSupported:function(){
var input=document.createElement("input")
;input.setAttribute("type","time")
;var supported=true
;if("time"!==input.type)supported=false
;return this.timeSupported=supported,input.remove(),
supported},timeSupported:true,
checkTimeFormat:function($timeInput){
if(!this.timeSupported){
$timeInput.next(".timeWarning").remove()
;var time=$timeInput.val(),isValid=this.isValidTime(time)
;if(!isValid)$timeInput.after('<div class="text-danger timeWarning">Enter time as "hh:mm" in 24-hr format</div>')
;this.resize()}},isValidDate:function(dateString){
var regEx=/^\d{4}-\d{2}-\d{2}$/
;if(!dateString.match(regEx))return false
;var d=new Date(dateString),dNum=d.getTime()
;if(!dNum&&0!==dNum)return false
;return d.toISOString().slice(0,10)===dateString},
isDateSupported:function(){
var input=document.createElement("input")
;input.setAttribute("type","date")
;var supported=true
;if("date"!==input.type)supported=false
;return this.dateSupported=supported,input.remove(),
supported},dateSupported:true,
checkDateFormat:function($dateInput){
if(!this.dateSupported){
$dateInput.next(".dateWarning").remove()
;var date=$dateInput.val(),isValid=this.isValidDate(date)
;if(!isValid)$dateInput.after('<div class="text-danger dateWarning">Enter date as "YYYY-MM-DD"</div>')
;$dateInput.datepicker({dateFormat:"yy-mm-dd"
}),this.resize()}},setUpInitialState:function(){
$jq351("#testSel").selectize({}),
$("#testSel").append("<option value='3'>3</option>"),
$jq351("#testSel")[0].selectize.addOption({
value:3,text:"3"
}),$(".myLeftCol").addClass("col-12 col-sm-6 col-md-4 col-lg-3 text-left text-sm-right"),
this.isDateSupported(),
this.isTimeSupported(),$("input[type='date']").prop("placeholder","YYYY-MM-DD").on("change",e=>{
this.checkDateFormat($(e.currentTarget))
}),$("input[type='time']").prop("placeholder","hh:mm").on("change",e=>{
this.checkTimeFormat($(e.target))
}),$("textarea.autoAdjust").each((i,e)=>{
e.setAttribute("style","height:"+e.scrollHeight+"px;overflow-y:hidden;")
}).on("input",e=>{
e.target.style.height="auto",e.target.style.height=e.target.scrollHeight+"px",
this.resize()}),$(".toggleTable").on("click",e=>{
var tableID=$(e.currentTarget).data("table"),$table=$("#"+tableID),$errorMsg=$("#errorMsg")
;this.toggleTableFuncs($table,$errorMsg)
}),$(".toCSV").on("click",e=>{
var tableID=$(e.currentTarget).data("table"),dateToday=luxon.DateTime.now().toISODate(),fileName="table_"+tableID+"_"+dateToday,$errorMsg=$("#errorMsg")
;this.toCSVFuncs(fileName,tableID,$errorMsg)
}),$(".copyData").on("click",e=>{
var tableID=$(e.currentTarget).data("table"),tableSearch=this.tableSearch(tableID),$copyHead=$(".copyHead"+tableSearch),$transpose=$(".transpose"+tableSearch),$tableToCopy=$("#"+tableID),$tableDiv=$tableToCopy.parent(),$errorMsg=$("#errorMsg"),$divForCopy=$("#forCopy")
;this.copyDataFuncs($copyHead,$tableToCopy,$tableDiv,$errorMsg,$divForCopy,$transpose)
}),$(".addDam").on("click",e=>{
if(this.damNums.length>0)var lastDam=this.damNums[this.damNums.length-1],damNum=lastDam+1;else var damNum=1
;this.addDam(damNum)
}),$(".addSire").on("click",e=>{
if(this.sireNums.length>0)var lastSire=this.sireNums[this.sireNums.length-1],sireNum=lastSire+1;else var sireNum=1
;this.addSire(sireNum)
}),$(".addDamGen").on("click",e=>{
if(this.damGenerationNums.length>0)var lastDamGeneration=this.damGenerationNums[this.damGenerationNums.length-1],damGeneration=lastDamGeneration+1;else var damGeneration=1
;this.addDamGeneration(damGeneration)
}),$(".addSireGen").on("click",e=>{
if(this.sireGenerationNums.length>0)var lastSireGeneration=this.sireGenerationNums[this.sireGenerationNums.length-1],sireGeneration=lastSireGeneration+1;else var sireGeneration=1
;this.addSireGeneration(sireGeneration)
}),$("#collapseDams").on("click",e=>{
this.collapseAllDamCards()
}),$("#the_form").on("input",e=>{
if($(e.target).data("watch"))this.watchValue($(e.target));else this.updateCalcFromEl(e.target)
}),$("input, select, textarea").each((i,e)=>{
if("button"!=$(e).attr("type"))if($(e).data("watch"))this.watchValue($(e));else this.updateCalcFromEl(e)
});var dateToday=luxon.DateTime.now().toISODate()
;$("#damSelect").attr("size",Math.min(this.damNums.length,15)),
$("#selFood").on("click",e=>{
this.selectFood($("#changeDate").val())
}),$("#selFoodWater").on("click",e=>{
this.selectFoodWater($("#changeDate").val())
}),$("#selBottom").on("click",e=>{
this.selectDamBottom($("#changeDate").val())
}),$("#selTop").on("click",e=>{
this.selectDamTop($("#changeDate").val())
}),$(".htmlCardHeader").on("click",e=>{
this.toggleCard($(e.currentTarget))
}),$("#convertToTable").on("click",e=>{
var tableText=$("#pasteField").val(),makeFirstColHead=false,makeFirstRowHead=false
;if($("#makeColHead").is(":checked"))makeFirstColHead=true
;if($("#makeRowHead").is(":checked"))makeFirstRowHead=true
;var $divForTable=$(".forTable")
;this.rebuildTableFromStr(tableText,makeFirstRowHead,makeFirstColHead,$divForTable)
}),$("#upload").on("click",e=>{this.upload()
}),$("#preview").on("click",e=>{this.preview()
}),this.resize()},
updateTextarea:function(textarea){
if(!$(textarea).is(":hidden"))textarea.setAttribute("style","height:"+textarea.scrollHeight+"px;overflow-y:hidden;")
;this.resize()},getCheckState:function($el){
var checkState=false
;if($el.is(":checked"))checkState=true
;return checkState},resize:function(){
this.parent_class.resize_container()},
checkForNames:function(){
$("input, select, textarea").each((i,e)=>{
var thisName=$(e).attr("name")
;if(!thisName)console.log("There is no name attribute for: ",e.id);else{
var hasUpper=/[A-Z]/.test(thisName)
;if(hasUpper)console.log("The name contains an uppercase letter for: ",e.id)
}})},getDynamicContent:function(){
var dynamicContent={};return dynamicContent},
data_valid_form:function($errorMsg){
var valid=true,fail_log=$("<div></div>").append("Missing values for:"),name
;if($(".needForTable").each((i,e)=>{
if(!$(e).val())valid=false,name=$(e).attr("id"),
fail_log.append("<br/>"+name)
}),!valid)$errorMsg.html("<span style='color:red; font-size:36px;'>"+"Please fill out all elements marked by a"+"</span><span style='color:blue; font-size:36px;'>"+" blue #"+"</span>"),
$errorMsg.append(fail_log);else $errorMsg.html("")
;return this.resize(),valid},
runIfConfirmed:function(text,functionToCall,elForHeight=null){
var thisMessage="Are you sure?"
;if(text)thisMessage=text;var top="auto"
;if(elForHeight)top=elForHeight.offsetTop+"px"
;bootbox.confirm({message:thisMessage,
callback:proceed=>{if(proceed)functionToCall()}
}),$(".modal-dialog").css("top",top)},
dialogConfirm:function(text,functionToCall,elForHeight=null){
var thisMessage="Do you want to proceed?"
;if(text)thisMessage=text;var top="auto"
;if(elForHeight)top=elForHeight.offsetTop+"px"
;bootbox.confirm({message:thisMessage,
callback:result=>{functionToCall(result)}
}),$(".modal-dialog").css("top",top)},
runBasedOnInput:function(prompt,functionToCall,elForHeight=null){
var thisTitle="Enter value:"
;if(prompt)thisTitle=prompt;var top="auto"
;if(elForHeight)top=elForHeight.offsetTop+"px"
;bootbox.prompt({title:thisTitle,
callback:result=>{functionToCall(result)}
}),$(".modal-dialog").css("top",top)},
checkInArray:function(searchVal,array){
var proceed=-1!==$.inArray(searchVal,array)
;return proceed},
dataSearch:function(dataName,dataValue){
var dataSearch="[data-"+dataName+"='"+dataValue+"']"
;return dataSearch},tableSearch:function(table){
var tableSearch=this.dataSearch("table",table)
;return tableSearch},calcSearch:function(calc){
var calcSearch=this.dataSearch("calc",calc)
;return calcSearch},daySearch:function(day){
var daySearch=this.dataSearch("day",day)
;return daySearch},mouseSearch:function(mouse){
var mouseSearch=this.dataSearch("mouse",mouse)
;return mouseSearch},damSearch:function(dam){
var damSearch=this.dataSearch("dam",dam)
;return damSearch},sireSearch:function(sire){
var sireSearch=this.dataSearch("sire",sire)
;return sireSearch},damGenSearch:function(damGen){
var damGenSearch=this.dataSearch("damgen",damGen)
;return damGenSearch},
sireGenSearch:function(sireGen){
var sireGenSearch=this.dataSearch("siregen",sireGen)
;return sireGenSearch},
updateCalcFromEl:function(el){
var calc=el.id,val=el.value,calcSearch=this.calcSearch(calc)
;$(calcSearch).html(val),this.resize()},
updateCalcFromVal:function(calc,val){
var calcSearch=this.calcSearch(calc)
;$(calcSearch).text(val),this.resize()},
watchValue:function($el){
var watch=$el.data("watch"),calcSearch=this.calcSearch(watch),damNum=$el.data("dam"),damGenNum=$el.data("damgen"),sireNum=$el.data("sire"),sireGenNum=$el.data("siregen"),val=$el.val()
;if(damNum)calcSearch+=this.damSearch(damNum)
;if(damGenNum)calcSearch+=this.damGenSearch(damGenNum)
;if(sireNum)calcSearch+=this.sireSearch(sireNum)
;if(sireGenNum)calcSearch+=this.sireGenSearch(sireGenNum)
;if("damID"==watch)if(!val)val="Dam "+damNum
;$(calcSearch).text(val),this.resize()},
toggleTableFuncs:function($table,$errorMsg){
this.data_valid_form($errorMsg),$table.toggle(),
this.resize()},
toCSVFuncs:function(fileName,tableID,$errorMsg){
var data_valid=this.data_valid_form($errorMsg)
;if(data_valid)this.exportTableToCSV(fileName,tableID),
$errorMsg.html("<span style='color:grey; font-size:24px;'>Saved successfully</span>");else $errorMsg.append("<br/><span style='color:grey; font-size:24px;'>Did not export</span>")
},downloadCSV:function(csv,filename){
var csvFile,downloadLink;csvFile=new Blob([csv],{
type:"text/csv"
}),downloadLink=document.createElement("a"),downloadLink.download=filename,
downloadLink.href=window.URL.createObjectURL(csvFile),
downloadLink.style.display="none",
document.body.appendChild(downloadLink),downloadLink.click()
},exportTableToCSV:function(filename,table){
var tableArray=this.getTableArray($("#"+table),copyHead=true,transpose=false),tableString=this.convertRowArrayToString(tableArray,",","\n")
;this.downloadCSV(tableString,filename)},
copyDataFuncs:function($copyHead,$tableToCopy,$tableDiv,$errorMsg,$divForCopy,$transpose){
var data_valid=this.data_valid_form($errorMsg),copyHead=false,transpose=false
;if($copyHead.is(":checked"))copyHead=true
;if($transpose.is(":checked"))transpose=true
;if(data_valid)$tableDiv.show(),this.resize(),
this.copyTable($tableToCopy,copyHead,$divForCopy,$errorMsg,transpose),
$errorMsg.html("<span style='color:grey; font-size:24px;'>Copied successfully</span>");else $errorMsg.append("<br/><span style='color:grey; font-size:24px;'>Nothing was copied</span>")
},
copyTable:function($table,copyHead,$divForCopy,$errorMsg,transpose){
var tableArray=this.getTableArray($table,copyHead,transpose),tableString=this.convertRowArrayToString(tableArray,"\t","\n")
;this.copyStringToClipboard(tableString,$divForCopy,$errorMsg)
},
getTableArray:function($table,copyHead,transpose){
var rows=[],rowNum=0
;if(copyHead)$table.find("thead").children("tr").each((i,e)=>{
if(transpose)rowNum=0
;if($(e).find("td, th").each((i,e)=>{
if(void 0===rows[rowNum])rows[rowNum]=[]
;if(rows[rowNum].push($(e).text()),transpose)rowNum++
}),!transpose)rowNum++})
;return $table.find("tbody").children("tr").each((i,e)=>{
if(transpose)rowNum=0
;if($(e).find("td, th").each((i,e)=>{
if(void 0===rows[rowNum])rows[rowNum]=[]
;if(rows[rowNum].push($(e).text()),transpose)rowNum++
}),!transpose)rowNum++}),rows},
convertRowArrayToString:function(rowArray,cellSepString="\t",newRowString="\n"){
var rowString=[];rowArray.forEach(row=>{
if(row.length)row.forEach((cell,i)=>{
if(cell.includes(cellSepString)||cell.includes(newRowString))row[i]='"'+cell+'"'
}),rowString.push(row.join(cellSepString))})
;var tableString=rowString.join(newRowString)
;return tableString},
copyStringToClipboard:function(textStr,$divForCopy,$errorMsg){
var $temp=$("<text"+"area style='opacity:0;'></text"+"area>")
;if(textStr)errorStr="Copy attempted",
$errorMsg.html("<span style='color:grey; font-size:24px;'>Copy attempted</span>");else textStr=" ",
$errorMsg.html("<span style='color:red; font-size:24px;'>Nothing to copy</span>")
;$temp.text(textStr),
$temp.appendTo($divForCopy).select(),document.execCommand("copy"),
$temp.remove(),this.resize()},
toggleCard:function($cardHead){
$cardHead.next().toggleClass("collapse"),$cardHead.next().find("textarea.autoAdjust").each((i,e)=>{
if(!$(e).is(":hidden"))e.setAttribute("style","height:"+e.scrollHeight+"px;overflow-y:hidden;")
}),this.resize()},collapseAllDamCards:function(){
$(".damCard").find(".card-header").each((i,e)=>{
$(e).next().addClass("collapse")}),this.resize()},
makeCard:function($div,cardHeadContent,cardBodyContent){
$div.append($("<div></div>",{class:"card"
}).append($("<button></button>",{type:"button",
class:"card-header"}).on("click",e=>{
this.toggleCard($(e.currentTarget))
}).append(cardHeadContent)).append($("<div></div>",{
class:"card-body collapse"
}).append(cardBodyContent))),this.resize()},
addDam:function(damNum){
var inArray=this.checkInArray(damNum,this.damNums)
;if(!inArray)this.damNums.push(damNum),
this.dams[damNum]={damID:"",damLoc:""
},this.makeDamCard(damNum)},
makeDamCard:function(damNum){
var $div=$("#damCardDiv")
;if(!$div.find(".card").length)$div.html("")
;var row="row mt-2",col="col-12 col-lg-6"
;$div.append($("<div/>",{
class:"col col-md-6 mt-2 damCard",
"data-dam":damNum}))
;var $damDiv=$(".damCard"+this.damSearch(damNum)),header=$("<div></div>",{
class:"damIDCalc","data-calc":"damID",
"data-dam":damNum
}).append("Dam "+damNum),$body=this.makeDamCardBody(damNum)
;this.makeCard($damDiv,header,$body),
this.makeDamGenList(damNum),$("#damSelect").append($("<option></option>",{
value:damNum,class:"damIDCalc",
"data-calc":"damID","data-dam":damNum
}).append("Dam "+damNum)).attr("size",Math.min(this.damNums.length,15))
},makeDamCardBody:function(damNum){
var $body=$("<div></div>"),initialRows=[{
label:"<h4>Dam ID:</h4>",type:"text",
className:"damID",addRowClass:" updateDamObj"},{
label:"Delete:",type:"button",
className:"deleteDam",optionsObj:[],
addRowClass:" hideView"},{label:"Generation:",
type:"select",className:"damGeneration",
addRowClass:" updateDamObj",optionsObj:[{value:"",
text:"[Select]"}]},{label:"Add breeding:",
type:"button",className:"addBreeding"}]
;for(row of initialRows)$body.append(this.makeRowFromObj(row,damNum,"dam"))
;return $body.append($("<div></div>",{
class:"container breedingDiv","data-dam":damNum
})),$body.find(".deleteDam").prop("value","Delete Dam").on("click",e=>{
this.deleteDamFuncs(damNum)
}),$body.find(".addBreeding").prop("value","Add Breeding").on("click",e=>{
this.makeDamBreeding(damNum)
}),$body.find(".updateDamObj").on("change",e=>{
var $el=$(e.target),val=$el.val()
;valSafe=this.encodeHTML(val)
;var thisProp=$el.data("watch")
;this.dams[damNum][thisProp]=valSafe,this.makeDueDatesTable()
}),$body},addSire:function(sireNum){
var inArray=this.checkInArray(sireNum,this.sireNums)
;if(!inArray)this.sireNums.push(sireNum),
this.sires[sireNum]={sireID:"",sireLoc:""
},this.makeSireCard(sireNum)},
makeSireCard:function(sireNum){
var $div=$("#sireCardDiv")
;if(!$div.find(".card").length)$div.html("")
;var row="row mt-2",col="col-12 col-lg-6"
;$div.append($("<div/>",{
class:"col col-md-6 mt-2 sireCard",
"data-sire":sireNum}))
;var $sireDiv=$(".sireCard"+this.sireSearch(sireNum)),header=$("<div></div>",{
class:"sireIDCalc","data-calc":"sireID",
"data-sire":sireNum
}).append("Sire "+sireNum),$body=this.makeSireCardBody(sireNum)
;this.makeCard($sireDiv,header,$body),
this.makeSireGenList(sireNum),$("#sireSelect").append($("<option></option>",{
value:sireNum,class:"sireIDCalc",
"data-calc":"sireID","data-sire":sireNum
}).append("Sire "+sireNum)).attr("size",Math.min(this.sireNums.length,15))
},makeSireCardBody:function(sireNum){
var $body=$("<div></div>"),initialRows=[{
label:"<h4>Sire ID:</h4>",type:"text",
className:"sireID",addRowClass:" updateSireObj"},{
label:"Delete:",type:"button",
className:"deleteSire",optionsObj:[],
addRowClass:" hideView"},{label:"Generation:",
type:"select",className:"sireGeneration",
addRowClass:" updateSireObj",optionsObj:[{
value:"",text:"[Select]"}]},{
label:"Add breeding:",type:"button",
className:"addBreeding"}]
;for(row of initialRows)$body.append(this.makeRowFromObj(row,sireNum,"sire"))
;return $body.append($("<div></div>",{
class:"container breedingDiv","data-sire":sireNum
})),$body.find(".deleteSire").prop("value","Delete Sire").on("click",e=>{
this.deleteSireFuncs(sireNum)
}),$body.find(".addBreeding").prop("value","Add Breeding").on("click",e=>{
this.makeSireBreeding(sireNum)
}),$body.find(".updateSireObj").on("change",e=>{
var $el=$(e.target),val=$el.val()
;valSafe=this.encodeHTML(val)
;var thisProp=$el.data("watch")
;this.sires[sireNum][thisProp]=valSafe,this.makeDueDatesTable()
}),$body},encodeHTML:function(dirtyString){
var container=document.createElement("div"),text=document.createTextNode(dirtyString)
;return container.appendChild(text),
container.innerHTML},
makeRow:function(label,$input,addRowClass=""){
var myLeftCol="col-12 col-lg-6"
;if(addRowClass)addRowClass=" "+addRowClass
;var $label=$("<label></label>",{
for:$input.attr("id")
}).append(label),$row=$("<div></div>",{
class:"row mt-2"+addRowClass
}).append($("<div></div>",{class:myLeftCol
}).append($label)).append($("<div></div>",{
class:"col"}).append($input));return $row},
addDamGeneration:function(damGenerationNum){
var inArray=this.checkInArray(damGenerationNum,this.damGenerationNums)
;if(!inArray)this.damGenerationNums.push(damGenerationNum),
this.damGenerations[damGenerationNum]={
damGen:null,damGenDOB:null,damGenStrain:null
},this.makeDamGenerationCard(damGenerationNum)},
makeDamGenerationCard:function(damGenerationNum){
var $div=$("#damGensCardDiv")
;if(!$div.find(".card").length)$div.html("")
;var row="row mt-2",col="col-12 col-lg-6"
;$div.append($("<div/>",{
class:"col col-md-6 mt-2 damGenCard",
"data-damgen":damGenerationNum}))
;var $damDiv=$(".damGenCard"+this.damGenSearch(damGenerationNum)),header=$("<div></div>",{
class:"damGenCalc","data-calc":"damGen",
"data-damgen":damGenerationNum
}).append("Dam Generation "+damGenerationNum),$body=this.makeDamGenerationCardBody(damGenerationNum)
;this.makeCard($damDiv,header,$body),
this.updateDamGenList(damGenerationNum)},
makeDamGenList:function(damNum){
var damGenNums=this.damGenerationNums,damGens=this.damGenerations,damSearch=this.damSearch(damNum)
;for(damGenNum of(console.log($(".damGeneration"+damSearch).length),
$(".damGenerations"+damSearch).html(""),
damGenNums)){
var damGen=damGens[damGenNum],genInfo="",gen=damGen.damGen
;if(!gen)gen="Gen "+damGenNum;genInfo=gen
;var dob=damGen.damGenDOB
;if(dob)genInfo+="; DOB: "+dob
;var strain=damGen.damGenStrain
;if(strain)genInfo+="; strain: "+strain
;$(".damGeneration"+damSearch).append($("<option></option>",{
value:damGenNum,"data-damgen":damGenNum
}).append(genInfo))}},
updateDamGenList:function(damGenNum){
var damGens=this.damGenerations,damGen=damGens[damGenNum],genInfo="",gen=damGen.damGen
;if(!gen)gen="Gen "+damGenNum
;genInfo=gen,$(".damGenCalc"+this.damGenSearch(damGenNum)).text(genInfo)
;var dob=damGen.damGenDOB
;if(dob)genInfo+="; DOB: "+dob
;var strain=damGen.damGenStrain
;if(strain)genInfo+="; strain: "+strain
;var $option=$(".damGeneration").find("option[value='"+damGenNum+"']")
;if(0==$option.length)$(".damGeneration").append($("<option></option>",{
value:damGenNum,"data-damgen":damGenNum
}).append(genInfo));else $option.text(genInfo)},
makeDamGenerationCardBody:function(damGenerationNum){
console.log("genNum:",damGenerationNum)
;var $body=$("<div></div>"),initialRows=[{
label:"<h4>Generation:</h4>",type:"text",
className:"damGen",
addRowClass:" updateDamGenerationObj"},{
label:"Delete:",type:"button",
className:"deleteDamGeneration",optionsObj:[],
addRowClass:" hideView"},{label:"DOB:",
type:"date",className:"damGenDOB",
addRowClass:" updateDamGenerationObj"},{
label:"Strain:",type:"text",
className:"damGenStrain",
addRowClass:" updateDamGenerationObj"}]
;for(row of initialRows)$body.append(this.makeRowFromObj(row,damGenerationNum,"damgen"))
;return $body.find(".deleteDamGeneration").prop("value","Delete Dam Gen").on("click",e=>{
this.deleteDamGenerationFuncs(damGenerationNum)
}),$body.find(".updateDamGenerationObj").on("change",e=>{
var $el=$(e.target),val=$el.val()
;valSafe=this.encodeHTML(val)
;var thisProp=$el.data("watch")
;console.log(thisProp,valSafe),this.damGenerations[damGenerationNum][thisProp]=valSafe,
this.updateDamGenList(damGenerationNum)}),$body},
addSireGeneration:function(sireGenerationNum){
var inArray=this.checkInArray(sireGenerationNum,this.sireGenerationNums)
;if(!inArray)this.sireGenerationNums.push(sireGenerationNum),
this.sireGenerations[sireGenerationNum]={
sireGen:null,sireGenDOB:null,sireGenStrain:null
},this.makeSireGenerationCard(sireGenerationNum)},
makeSireGenerationCard:function(sireGenerationNum){
var $div=$("#sireGensCardDiv")
;if(!$div.find(".card").length)$div.html("")
;var row="row mt-2",col="col-12 col-lg-6"
;$div.append($("<div/>",{
class:"col col-md-6 mt-2 sireGenCard",
"data-siregen":sireGenerationNum}))
;var $sireDiv=$(".sireGenCard"+this.sireGenSearch(sireGenerationNum)),header=$("<div></div>",{
class:"sireGenCalc","data-calc":"sireGen",
"data-siregen":sireGenerationNum
}).append("Sire Generation "+sireGenerationNum),$body=this.makeSireGenerationCardBody(sireGenerationNum)
;this.makeCard($sireDiv,header,$body),
this.updateSireGenList(sireGenerationNum)},
makeSireGenList:function(sireNum){
var sireGenNums=this.sireGenerationNums,sireGens=this.sireGenerations,sireSearch=this.sireSearch(sireNum)
;for(sireGenNum of(console.log($(".sireGeneration"+sireSearch).length),
$(".sireGenerations"+sireSearch).html(""),
sireGenNums)){
var sireGen=sireGens[sireGenNum],genInfo="",gen=sireGen.sireGen
;if(!gen)gen="Gen "+sireGenNum;genInfo=gen
;var dob=sireGen.sireGenDOB
;if(dob)genInfo+="; DOB: "+dob
;var strain=sireGen.sireGenStrain
;if(strain)genInfo+="; strain: "+strain
;$(".sireGeneration"+sireSearch).append($("<option></option>",{
value:sireGenNum,"data-siregen":sireGenNum
}).append(genInfo))}},
updateSireGenList:function(sireGenNum){
var sireGens=this.sireGenerations,sireGen=sireGens[sireGenNum],genInfo="",gen=sireGen.sireGen
;if(!gen)gen="Gen "+sireGenNum;genInfo=gen
;var dob=sireGen.sireGenDOB
;if(dob)genInfo+="; DOB: "+dob
;var strain=sireGen.sireGenStrain
;if(strain)genInfo+="; strain: "+strain
;var $option=$(".sireGeneration").find("option[value='"+sireGenNum+"']")
;if(0==$option.length)$(".sireGeneration").append($("<option></option>",{
value:sireGenNum,"data-siregen":sireGenNum
}).append(genInfo));else $option.text(genInfo)},
makeSireGenerationCardBody:function(sireGenerationNum){
console.log("genNum:",sireGenerationNum)
;var $body=$("<div></div>"),initialRows=[{
label:"<h4>Generation:</h4>",type:"text",
className:"sireGen",
addRowClass:" updateSireGenerationObj"},{
label:"Delete:",type:"button",
className:"deleteSireGeneration",optionsObj:[],
addRowClass:" hideView"},{label:"DOB:",
type:"date",className:"sireGenDOB",
addRowClass:" updateSireGenerationObj"},{
label:"Strain:",type:"text",
className:"sireGenStrain",
addRowClass:" updateSireGenerationObj"}]
;for(row of initialRows)$body.append(this.makeRowFromObj(row,sireGenerationNum,"siregen"))
;return $body.find(".deleteSireGeneration").prop("value","Delete Sire Gen").on("click",e=>{
this.deleteSireGenerationFuncs(sireGenerationNum)
}),$body.find(".updateSireGenerationObj").on("change",e=>{
var $el=$(e.target),val=$el.val()
;valSafe=this.encodeHTML(val)
;var thisProp=$el.data("watch")
;console.log(thisProp,valSafe),this.sireGenerations[sireGenerationNum][thisProp]=valSafe,
this.updateSireGenList(sireGenerationNum)}),$body
},
makeInput:function(inputType,className,dataNum,optionsObj,dataName){
var lowerCaseName=className.toLowerCase()
;if(dataString="data-"+dataName.toLowerCase(),
"select"===inputType){var selectObj={
name:lowerCaseName+dataNum,id:className+dataNum,
class:className+" fullWidth watch",
"data-watch":className}
;for(option of(selectObj[dataString]=dataNum,$input=$("<select></select>",selectObj),
optionsObj))$input.append($("<option></option>",{
value:option.value}).append(option.text))
}else if("textarea"===inputType){var inputObj={
name:lowerCaseName+dataNum,id:className+dataNum,
class:className+" fullWidth watch autoAdjust",
"data-watch":className}
;inputObj[dataString]=dataNum,$input=$("<tex"+"tarea></tex"+"tarea>",inputObj).on("input",e=>{
this.updateTextarea(e.currentTarget)})}else{
var inputObj={type:inputType,
name:lowerCaseName+dataNum,id:className+dataNum,
class:className+" fullWidth watch",
"data-watch":className}
;inputObj[dataString]=dataNum
;var $input=$("<input></input>",inputObj)}
if("time"===inputType)$input.each((i,e)=>{
this.checkTimeFormat($(e))}).on("change",e=>{
this.checkTimeFormat($(e.currentTarget))})
;if("date"===inputType)$input.each((i,e)=>{
this.checkDateFormat($(e))}).on("change",e=>{
this.checkDateFormat($(e.currentTarget))})
;return $input},
makeRowFromObj:function(obj,dataNum,dataName){
var $row=this.makeRow(obj.label,this.makeInput(obj.type,obj.className,dataNum,obj.optionsObj,dataName),obj.addRowClass)
;return $row},deleteDamFuncs:function(damNum){
this.runIfConfirmed("Are you sure that you wish to delete this dam?",()=>{
var index=this.damNums.indexOf(damNum)
;if(index>-1)this.damNums.splice(index,1)
;delete this.dams[damNum]
;var damSearch=this.damSearch(damNum)
;$(".damCard"+damSearch).remove(),$(damSearch).remove()
}),this.resize()},
deleteDamGenerationFuncs:function(damGenerationNum){
this.runIfConfirmed("Are you sure that you wish to delete this dam generation?",()=>{
var index=this.damGenerationNums.indexOf(damGenerationNum)
;if(index>-1)this.damGenerationNums.splice(index,1)
;delete this.damGenerations[damGenerationNum]
;var damGenSearch=this.damGenSearch(damGenerationNum)
;$(".damGenCard"+damGenSearch).remove(),
$(damGenSearch).remove()}),this.resize()},
deleteCareFuncs:function(damNum,careNum){
this.runIfConfirmed("Are you sure that you wish to delete this care?",()=>{
var index=this.dams[damNum].damCareNums.indexOf(careNum)
;if(index>-1)this.dams[damNum].damCareNums.splice(index,1)
;delete this.dams[damNum].damCares[careNum],
this.makeDueDatesTable(),this.getDamsDue($("#dueDate").val()),
this.makeDateCareTable($("#careDate").val()),
this.makeDamCareTable(damNum)}),this.resize()},
addCare:function(damNum,careNum,date,changeFood,changeWater,changeBottom,changeTop){
var inArray=this.checkInArray(careNum,this.dams[damNum].damCareNums)
;if(!inArray)this.dams[damNum].damCareNums.push(careNum),
this.dams[damNum].damCares[careNum]={date:date,
food:changeFood,water:changeWater,
damBottom:changeBottom,damTop:changeTop}},
careLabels:["date","food","water","damBottom","damTop"],
makeDamCareTable:function(damNum){
var damCareNums=this.dams[damNum].damCareNums,damCares=this.dams[damNum].damCares,labels=this.careLabels
;const tableData=[],damCareAddedNums=[]
;for(damCareNum of damCareNums){
var damCare=damCares[damCareNum],row=[]
;for(label of labels)row.push(damCare[label])
;tableData.unshift(row),damCareAddedNums.unshift(damCareNum)
}
tableData.unshift(labels),damCareAddedNums.unshift(NaN)
;var damID=this.dams[damNum].damID
;if(!damID)damID="Dam "+damNum
;if($("#tableInfo").text(damID),$tableDiv=$(".damCaresTable"),
this.createTable(tableData,true,false,$tableDiv),
"view"!==this.mode&&"view_dev"!==this.mode)$tableDiv.find("tr").each((i,e)=>{
if(0==i)$(e).append($("<th></th>").append("Delete"));else damCareNum=damCareAddedNums[i],
console.log("damCareNum",damCareNum),
$(e).append($("<td></td>").append($("<input></input>",{
"data-dam":damNum,"data-care":damCareNum,
value:"Delete care",
id:"deleteCare"+damNum+damCareNum,
class:"deleteCare",type:"button"}).on("click",e=>{
var damNum=$(e.currentTarget).data("dam"),careNum=$(e.currentTarget).data("care")
;this.deleteCareFuncs(damNum,careNum)})))})},
makeDateCareTable:function(matchDate){
var damNums=this.damNums,dams=this.dams,labels=this.careLabels
;const tableData=[["damID"].concat(labels)]
;for(damNum of damNums){
var damCareNums=dams[damNum].damCareNums,damCares=dams[damNum].damCares
;for(damCareNum of damCareNums){
var damCare=damCares[damCareNum]
;if(damCare.date==matchDate){var row=[]
;for(label of(row.push(dams[damNum].damID),
labels))row.push(damCare[label])
;tableData.push(row)}}}
$tableDiv=$(".caresOnDateTable"),this.createTable(tableData,true,false,$tableDiv)
},getWaterDueDate:function(damNum){
var dueDate,dateToday=luxon.DateTime.now().toISODate(),dams=this.dams,dam=dams[damNum],damCareNums=dam.damCareNums,damCares=dam.damCares,startDate=dam.startDam,endDate=dam.endDam,damType=dam.damType
;if(startDate&&!endDate&&("static"===damType||"lbn"===damType)){
var latestDate=void 0
;for(damCareNum of damCareNums){
var damCare=damCares[damCareNum]
;if(damCare.water&&(void 0===latestDate||damCare.date>latestDate))latestDate=damCare.date
}
if(void 0===latestDate)dueDate=dateToday;else if("lbn"===damType)dueDate=this.addDays(latestDate,1);else dueDate=this.addDays(latestDate,7)
}return dueDate},
isDueForWater:function(damNum,dueDate=luxon.DateTime.now().toISODate()){
var isDue=false,dams=this.dams,dam=dams[damNum],damCareNums=dam.damCareNums,damCares=dam.damCares,startDate=dam.startDam,endDate=dam.endDam,damType=dam.damType
;if(startDate&&startDate<dueDate&&(!endDate||endDate>dueDate)&&("static"===damType||"lbn"===damType)){
var latestDate=void 0
;for(damCareNum of damCareNums){
var damCare=damCares[damCareNum]
;if(damCare.water&&(void 0===latestDate||damCare.date>latestDate)&&damCare.date<=dueDate)latestDate=damCare.date
}
if(void 0===latestDate||"lbn"==damType&&latestDate<dueDate||this.addDays(latestDate,7)<=dueDate)isDue=true
}return isDue},
getDamsDueForWater:function(dueDate=luxon.DateTime.now().toISODate()){
var damNums=this.damNums;const damsDue=[]
;for(damNum of damNums){
var isDue=this.isDueForWater(damNum,dueDate)
;if(isDue)damsDue.push(damNum)}return damsDue},
getFoodDueDate:function(damNum){
var dueDate,dateToday=luxon.DateTime.now().toISODate(),dams=this.dams,dam=dams[damNum],damCareNums=dam.damCareNums,damCares=dam.damCares,startDate=dam.startDam,endDate=dam.endDam,damType=dam.damType
;if(startDate&&!endDate){var latestDate=void 0
;for(damCareNum of damCareNums){
var damCare=damCares[damCareNum]
;if(damCare.food&&(void 0===latestDate||damCare.date>latestDate))latestDate=damCare.date
}
if(void 0===latestDate)dueDate=dateToday;else if("lbn"===damType)dueDate=this.addDays(latestDate,1);else if("static"==damType)dueDate=this.addDays(latestDate,7);else dueDate=this.addDays(latestDate,14)
}return dueDate},
isDueForFood:function(damNum,dueDate=luxon.DateTime.now().toISODate()){
var isDue=false,dams=this.dams,dam=dams[damNum],damCareNums=dam.damCareNums,damCares=dam.damCares,startDate=dam.startDam,endDate=dam.endDam,damType=dam.damType
;if(startDate&&startDate<dueDate&&(!endDate||endDate>dueDate)){
var latestDate=void 0
;for(damCareNum of damCareNums){
var damCare=damCares[damCareNum]
;if(damCare.food&&(void 0===latestDate||damCare.date>latestDate)&&damCare.date<=dueDate)latestDate=damCare.date
}
if(void 0===latestDate||"lbn"===damType&&latestDate<dueDate||"static"===damType&&this.addDays(latestDate,7)<=dueDate||this.addDays(latestDate,14)<=dueDate)isDue=true
}return isDue},
getDamsDueForFood:function(dueDate=luxon.DateTime.now().toISODate()){
var damNums=this.damNums;const damsDue=[]
;for(damNum of damNums){
var isDue=this.isDueForFood(damNum,dueDate)
;if(isDue)damsDue.push(damNum)}return damsDue},
getBottomDueDate:function(damNum){
var dueDate,dateToday=luxon.DateTime.now().toISODate(),dams=this.dams,dam=dams[damNum],damCareNums=dam.damCareNums,damCares=dam.damCares,startDate=dam.startDam,endDate=dam.endDam,damType=dam.damType
;if(startDate&&!endDate){var latestDate=void 0
;for(damCareNum of damCareNums){
var damCare=damCares[damCareNum]
;if(damCare.damBottom&&(void 0===latestDate||damCare.date>latestDate))latestDate=damCare.date
}
if(void 0===latestDate)dueDate=dateToday;else if("lbn"===damType||"static"===damType)dueDate=this.addDays(latestDate,7);else dueDate=this.addDays(latestDate,14)
}return dueDate},
isDueForBottom:function(damNum,dueDate=luxon.DateTime.now().toISODate()){
var isDue=false,dams=this.dams,dam=dams[damNum],damCareNums=dam.damCareNums,damCares=dam.damCares,startDate=dam.startDam,endDate=dam.endDam,damType=dam.damType
;if(startDate&&startDate<dueDate&&(!endDate||endDate>dueDate)){
var latestDate=void 0
;for(damCareNum of damCareNums){
var damCare=damCares[damCareNum]
;if(damCare.damBottom&&(void 0===latestDate||damCare.date>latestDate)&&damCare.date<=dueDate)latestDate=damCare.date
}
if(void 0===latestDate||("static"===damType||"lbn"===damType)&&this.addDays(latestDate,7)<=dueDate||this.addDays(latestDate,14)<=dueDate)isDue=true
}return isDue},
getDamsDueForBottom:function(dueDate=luxon.DateTime.now().toISODate()){
var damNums=this.damNums;const damsDue=[]
;for(damNum of damNums){
var isDue=this.isDueForBottom(damNum,dueDate)
;if(isDue)damsDue.push(damNum)}return damsDue},
getTopDueDate:function(damNum){
var dueDate,dateToday=luxon.DateTime.now().toISODate(),dams=this.dams,dam=dams[damNum],damCareNums=dam.damCareNums,damCares=dam.damCares,startDate=dam.startDam,endDate=dam.endDam
;if(startDate&&!endDate){var latestDate=void 0
;for(damCareNum of damCareNums){
var damCare=damCares[damCareNum]
;if(damCare.damTop&&(void 0===latestDate||damCare.date>latestDate))latestDate=damCare.date
}
if(void 0===latestDate)dueDate=dateToday;else dueDate=this.addDays(latestDate,90)
}return dueDate},
isDueForTop:function(damNum,dueDate=luxon.DateTime.now().toISODate()){
var isDue=false,dams=this.dams,dam=dams[damNum],damCareNums=dam.damCareNums,damCares=dam.damCares,startDate=dam.startDam,endDate=dam.endDam
;if(startDate&&startDate<dueDate&&(!endDate||endDate>dueDate)){
var latestDate=void 0
;for(damCareNum of damCareNums){
var damCare=damCares[damCareNum]
;if(damCare.damTop&&(void 0===latestDate||damCare.date>latestDate)&&damCare.date<=dueDate)latestDate=damCare.date
}
if(void 0===latestDate||this.addDays(latestDate,90)<=dueDate)isDue=true
}return isDue},
getDamsDueForTop:function(dueDate=luxon.DateTime.now().toISODate()){
var damNums=this.damNums,dams=this.dams
;const damsDue=[];for(damNum of damNums){
var isDue=this.isDueForTop(damNum,dueDate)
;if(isDue)damsDue.push(damNum)}return damsDue},
getDamsDue:function(dueDate=luxon.DateTime.now().toISODate()){
var damBottomsToChange=this.getDamsDueForBottom(dueDate),damTopsToChange=this.getDamsDueForTop(dueDate),foodToChange=this.getDamsDueForFood(dueDate),waterToChange=this.getDamsDueForWater(dueDate),namesBottoms=this.getDamNamesArray(damBottomsToChange),namesTops=this.getDamNamesArray(damTopsToChange),namesFood=this.getDamNamesArray(foodToChange),namesWater=this.getDamNamesArray(waterToChange)
;this.printDams(namesBottoms,$(".damBottomsList")),
this.printDams(namesTops,$(".damTopsList")),
this.printDams(namesFood,$(".foodDamList")),
this.printDams(namesWater,$(".waterDamList")),
this.resize()},
selectFood:function(dueDate=luxon.DateTime.now().toISODate()){
var foodToChange=this.getDamsDueForFood(dueDate)
;$("#damSelect").val(foodToChange),
$("#changeWater").prop("checked",false),$("#changeFood").prop("checked",true),
$("#changeBottom").prop("checked",false),
$("#changeTop").prop("checked",false)},
selectFoodWater:function(dueDate=luxon.DateTime.now().toISODate()){
var foodToChange=this.getDamsDueForFood(dueDate),waterToChange=this.getDamsDueForWater(dueDate),comboDams=Array.from(new Set(foodToChange.concat(waterToChange)))
;$("#damSelect").val(comboDams),
$("#changeWater").prop("checked",true),$("#changeFood").prop("checked",true),
$("#changeBottom").prop("checked",false),
$("#changeTop").prop("checked",false)},
selectDamBottom:function(dueDate=luxon.DateTime.now().toISODate()){
var damBottomsToChange=this.getDamsDueForBottom(dueDate)
;$("#damSelect").val(damBottomsToChange),
$("#changeWater").prop("checked",false),
$("#changeFood").prop("checked",true),$("#changeBottom").prop("checked",true),
$("#changeTop").prop("checked",false)},
selectDamTop:function(dueDate=luxon.DateTime.now().toISODate()){
var damTopsToChange=this.getDamsDueForTop(dueDate)
;$("#damSelect").val(damTopsToChange),
$("#changeWater").prop("checked",false),$("#changeFood").prop("checked",true),
$("#changeBottom").prop("checked",true),
$("#changeTop").prop("checked",true)},
getDamNamesArray:function(damNumArray){
var names=[];for(damNum of damNumArray){
var thisID=this.dams[damNum].damID
;if(!thisID)thisID="Dam "+damNum
;names.push(thisID)}return names},
printDams:function(damsArray,$div){
damsArrayClean=this.encodeHTML(damsArray).split(","),
$div.html(damsArrayClean.join("<br/>"))},
addDays:function($startDateVal,numDays){
var newDate=luxon.DateTime.fromISO($startDateVal).plus({
days:numDays}).toISODate();return newDate},
createTable:function(tableData,makeFirstRowHead=false,makeFirstColHead=false,$tableDiv){
var table=document.createElement("table")
;table.classList.add("table")
;var tableBody=document.createElement("tbody")
;if(tableData.forEach((rowData,rowNum)=>{
var row=document.createElement("tr")
;rowData.forEach((cellData,colNum)=>{
if(makeFirstRowHead&&0==rowNum||makeFirstColHead&&0==colNum)var cell=document.createElement("th");else var cell=document.createElement("td")
;cell.appendChild(document.createTextNode(cellData)),
row.appendChild(cell)}),tableBody.appendChild(row)
}),table.appendChild(tableBody),
void 0===$tableDiv||!$tableDiv)console.log("appending generally"),
document.body.appendChild(table);else $tableDiv.html(""),
$tableDiv.append(table);this.resize()},
getDueDatesForDam:function(damNum){
var waterDate=this.getWaterDueDate(damNum),foodDate=this.getFoodDueDate(damNum),bottomDate=this.getBottomDueDate(damNum),topDate=this.getTopDueDate(damNum)
;return this.dams[damNum].water=waterDate,
this.dams[damNum].food=foodDate,this.dams[damNum].bottom=bottomDate,
this.dams[damNum].top=topDate,{water:waterDate,
food:foodDate,bottom:bottomDate,top:topDate}},
allDamTableLabels:["damID","damLoc","damType","food","water","bottom","top","barcode"],
makeDueDatesTable:function(){
var damNums=this.damNums,dams=this.dams,labels=this.allDamTableLabels
;const tableData=[labels];for(damNum of damNums){
this.getDueDatesForDam(damNum)
;var dam=dams[damNum],endDate=dam.endDam
;if(!endDate){var row=[];for(label of labels){
var val=dam[label];if(!val)val="";row.push(val)}
tableData.push(row)}}
$tableDiv=$(".dueDatesTable"),this.createTable(tableData,true,false,$tableDiv),
$tableDiv.find("td").each((i,e)=>{
var text=$(e).text();if(this.isValidDate(text)){
if(text<=luxon.DateTime.now().toISODate())$(e).addClass("isDue")
;$(e).text(luxon.DateTime.fromISO(text).toLocaleString({
weekday:"short",month:"short",day:"2-digit"}))}})
},
rebuildTableFromStr:function(textStr,makeFirstRowHead,makeFirstColHead,$tableDiv){
var rowArray=this.makeArrayFromStr(textStr)
;if(this.addedTable=textStr,void 0===$tableDiv||!$tableDiv)this.createTable(rowArray,makeFirstRowHead,makeFirstColHead);else this.createTable(rowArray,makeFirstRowHead,makeFirstColHead,$tableDiv)
;this.resize()},
makeArrayFromStr:function(textStr){
var results=Papa.parse(textStr,{
skipEmptyLines:true});return results.data},
preview:function(){
var fileUpload=document.getElementById("fileUpload"),regex=/^([a-zA-Z0-9\s_\\.\-:])+(.csv|.txt)$/
;if(regex.test(fileUpload.value.toLowerCase()))if("undefined"!=typeof FileReader){
var reader=new FileReader;reader.onload=(e=>{
var csvText=e.target.result,makeFirstColHead=false,makeFirstRowHead=false
;if($("#makeColHead").is(":checked"))makeFirstColHead=true
;if($("#makeRowHead").is(":checked"))makeFirstRowHead=true
;var $divForTable=$(".forTable")
;this.rebuildTableFromStr(csvText,makeFirstRowHead,makeFirstColHead,$divForTable)
}),reader.readAsText(fileUpload.files[0])
}else bootbox.alert("This browser does not support HTML5.");else bootbox.alert("Please upload a valid CSV file.")
},
damGenLabels:["damGen","damGenDOB","damGenStrain"],
sireGenLabels:["sireGen","sireGenDOB","sireGenStrain"],
addDamGenFromTable:function(obj){
if(this.damGenerationNums.length>0)var lastDamGeneration=this.damGenerationNums[this.damGenerationNums.length-1],damGenerationNum=lastDamGeneration+1;else var damGenerationNum=1
;this.addDamGeneration(damGenerationNum)
;var damGenerationSearch=this.damGenSearch(damGenerationNum),headers=this.damGenLabels
;for(header of headers)$("."+header+damGenerationSearch).val(obj[header]),
this.damGenerations[damGenerationNum][header]=obj[header]
;this.updateDamGenList(damGenerationNum)},
addSireGenFromTable:function(obj){
if(this.sireGenerationNums.length>0)var lastSireGeneration=this.sireGenerationNums[this.sireGenerationNums.length-1],sireGenerationNum=lastSireGeneration+1;else var sireGenerationNum=1
;this.addSireGeneration(sireGenerationNum)
;var sireGenerationSearch=this.sireGenSearch(sireGenerationNum),headers=this.sireGenLabels
;for(header of headers)$("."+header+sireGenerationSearch).val(obj[header]),
this.sireGenerations[sireGenerationNum][header]=obj[header]
;this.updateSireGenList(sireGenerationNum)},
addDamFromTable:function(obj,headers){
if(this.damNums.length>0)var lastDam=this.damNums[this.damNums.length-1],damNum=lastDam+1;else var damNum=1
;this.addDam(damNum)
;var damSearch=this.damSearch(damNum)
;for(header of headers){
var damGen,damGenDOB,damGenStrain
;if("damID"===header)$("."+header+damSearch).val(obj[header]),
this.dams[damNum][header]=obj[header];else if("damGen"===header||header.toLowerCase().includes("gen"))damGen=obj[header];else if("damGenDOB"===header||header.toLowerCase().includes("DOB"))damGenDOB=obj[header];else if("damGenStrain"===header||header.toLowerCase().includes("strain"))damGenStrain=obj[header]
}
var matchInfo=this.getMatchingObjSubset(this.damGenerations,"damGen",damGen,"damGenDOB",damGenDOB,"damGenStrain",damGenStrain)
;if(matchInfo.matchingObj.length>0)$(".damGeneration"+damSearch).val(matchInfo.matchingObj[0]);else if(matchInfo.noMatches&&damGen){
var obj={damGen:damGen,damGenDOB:damGenDOB,
damGenStrain:damGenStrain}
;this.addDamGenFromTable(obj)}},
addSireFromTable:function(obj,headers){
if(this.sireNums.length>0)var lastSire=this.sireNums[this.sireNums.length-1],sireNum=lastSire+1;else var sireNum=1
;this.addSire(sireNum)
;var sireSearch=this.sireSearch(sireNum)
;for(header of headers){
var sireGen,sireGenDOB,sireGenStrain
;if("sireID"===header)$("."+header+sireSearch).val(obj[header]),
this.sires[sireNum][header]=obj[header];else if("sireGen"===header||header.toLowerCase().includes("gen"))sireGen=obj[header];else if("sireGenDOB"===header||header.toLowerCase().includes("DOB"))sireGenDOB=obj[header];else if("sireGenStrain"===header||header.toLowerCase().includes("strain"))sireGenStrain=obj[header]
}
var matchInfo=this.getMatchingObjSubset(this.sireGenerations,"sireGen",sireGen,"sireGenDOB",sireGenDOB,"sireGenStrain",sireGenStrain)
;if(matchInfo.matchingObj.length>0)$(".sireGeneration"+sireSearch).val(matchInfo.matchingObj[0]);else if(matchInfo.noMatches&&sireGen){
var obj={sireGen:sireGen,sireGenDOB:sireGenDOB,
sireGenStrain:sireGenStrain}
;this.addSireGenFromTable(obj)}},
upload:function(){var tableStr=this.addedTable
;if(tableStr){var byHeader=Papa.parse(tableStr,{
skipEmptyLines:true,header:true
}),dataByHeader=byHeader.data,headers=byHeader.meta.fields
;if(headers.join("")===this.damGenLabels.join(""))for(obj of dataByHeader)this.addDamGenFromTable(obj);else if(headers.join("")===this.sireGenLabels.join(""))for(obj of dataByHeader)this.addSireGenFromTable(obj);else if("damID"===headers[0])for(obj of dataByHeader)this.addDamFromTable(obj,headers);else if("sireID"===headers[0])for(obj of dataByHeader)this.addSireFromTable(obj,headers);else bootbox.alert("Please use a table that has appropriate headers so that we know what to do with it. [damGen, damGenDOB, damGenStrain], [sireGen, sireGenDOB, sireGenStrain], [damID], or [sireID]")
}else bootbox.alert("Please either make an HTML table after pasting from Excel or preview a CSV file first")
},
getMatchingObjSubset:function(obj,firstMatchKey,firstMatchVal,secondMatchKey,secondMatchVal,thirdMatchKey,thirdMatchVal){
var noMatches=false,matchingObj,objAsArray=Object.entries(obj),matchFirstKeys=objAsArray.filter(d=>d[1][firstMatchKey]===firstMatchVal),matchingObjs=matchFirstKeys
;if(matchingObjs.length>1){
var matchSecondKeys=matchingObjs.filter(d=>d[1][secondMatchKey]===secondMatchVal)
;if(matchingObjs=matchSecondKeys,
matchingObjs.length>1){
var matchThirdKeys=matchingObjs.filter(d=>d[1][thirdMatchKey]===thirdMatchVal)
;matchingObjs=matchThirdKeys}
}else if(0===matchingObjs.length)noMatches=true
;if(1!==matchingObjs.length)matchingObj={};else matchingObj=matchingObjs[0]
;return{matchingObj:matchingObj,
noMatches:noMatches}}};