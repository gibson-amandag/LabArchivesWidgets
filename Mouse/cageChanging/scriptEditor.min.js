my_widget_script={cageNums:[],cages:{},
mode:"edit",init:function(mode,json_data){
this.include("https://code.jquery.com/jquery-3.5.1.min.js","sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=","anonymous",()=>{
$(document).ready(()=>{
this.include("https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js","sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl","anonymous",()=>{
$(document).ready(()=>{
this.include("https://cdn.jsdelivr.net/npm/luxon@1.26.0/build/global/luxon.min.js","sha256-4sbTzmCCW9LGrIh5OsN8V5Pfdad1F1MwhLAOyXKnsE0=","anonymous",()=>{
$(document).ready(()=>{
this.include("https://cdnjs.cloudflare.com/ajax/libs/bootbox.js/5.5.2/bootbox.min.js","sha512-RdSPYh1WA6BF0RhpisYJVYkOyTzK4HwofJ3Q7ivt/jkpW6Vc8AurL1R+4AUcvn9IwEKAPm/fk7qFZW3OuiUDeg==","anonymous",()=>{
$(document).ready(()=>{
$jq351=jQuery.noConflict(true),this.myInit(mode,json_data)
})})})})})})})})},
include:function(src,integrity,crossorigin,onload){
var head=document.getElementsByTagName("head")[0],script=document.createElement("script")
;script.setAttribute("integrity",integrity),
script.setAttribute("crossorigin",crossorigin),
script.src=src,script.type="text/javascript",
script.onload=script.onreadystatechange=function(){
if(script.readyState){
if("complete"===script.readyState||"loaded"===script.readyState)script.onreadystatechange=null,
onload()}else onload()},head.appendChild(script)},
myInit:function(mode,json_data){this.mode=mode
;var parsedJson=this.parseInitJson(json_data)
;this.initDynamicContent(parsedJson),
window.onresize=(()=>this.resize()),this.addEventListeners(),
this.parent_class.init(mode,()=>JSON.stringify(parsedJson.widgetData)),
this.addRequiredFieldIndicators(),
this.setUpInitialState(),this.adjustForMode(mode),
this.checkForNames()},to_json:function(){
var widgetJsonString=this.parent_class.to_json(),dynamicContent=this.getDynamicContent(),output={
widgetData:JSON.parse(widgetJsonString),
cageNums:this.cageNums,cages:this.cages}
;return JSON.stringify(output)},
from_json:function(json_data){
var parsedJson=JSON.parse(json_data)
;this.parent_class.from_json(JSON.stringify(parsedJson.widgetData))
},test_data:function(){
var testData=JSON.parse(this.parent_class.test_data()),output={
widgetData:testData,cageNums:[2,5],cages:{2:{
cageCareNums:[2,4],cageCares:{2:{
date:"2022-11-01",food:true,cageBottom:false},4:{
date:"2022-11-09",food:true,cageBottom:false}}},
5:{cageCareNums:[1,3],cageCares:{1:{
date:"2022-11-02",food:true,cageBottom:true},3:{
date:"2022-11-11",food:true,cageBottom:false}}}}}
;return JSON.stringify(output)},
is_valid:function(b_suppress_message){
var fail=false,fail_log="",name
;if($("#the_form").find("select, textarea, input").each((i,e)=>{
if(!$(e).prop("required"));else if(!$(e).val())fail=true,
name=$(e).attr("id"),fail_log+=name+" is required \n"
}),$("input[type='date']").each((i,e)=>{
var date=$(e).val();if(date){
var validDate=this.isValidDate(date)
;if(!validDate)fail=true,fail_log+="Please enter valid date in form 'YYYY-MM-DD'"
}}),$("input[type='time']").each((i,e)=>{
var time=$(e).val();if(time){
var validtime=this.isValidTime(time)
;if(!validtime)fail=true,fail_log+="Please enter valid time in form 'hh:mm' - 24 hr time"
}}),fail)return bootbox.alert(fail_log);else{
var noErrors=[];return noErrors}},
is_edited:function(){
return this.parent_class.is_edited()},
reset_edited:function(){
return this.parent_class.reset_edited()},
parseInitJson:function(json_data){var jsonString
;if("string"===typeof json_data)jsonString=json_data;else jsonString=json_data()
;var parsedJson=JSON.parse(jsonString)
;return parsedJson},
initDynamicContent:function(parsedJson){
if(parsedJson.cageNums){
for(cageNum of parsedJson.cageNums)this.makeCageCard(cageNum)
;this.cageNums=parsedJson.cageNums}
if(parsedJson.cages)this.cages=parsedJson.cages},
adjustForMode:function(mode){
if("edit"!==mode&&"edit_dev"!==mode)$(".disableOnView").prop("disabled",true),
$("input[type='date']").not(".editOnView").removeClass(".hasDatePicker"),
$(".editOnView").prop("readonly","").prop("disabled",""),
$(".editOnView").find("option").prop("disabled",""),
$(".hideView").hide(),$("#dueDate").datepicker({
dateFormat:"yy-mm-dd"
}),$("#careDate").datepicker({
dateFormat:"yy-mm-dd"
});else $("input[type='date']").each((i,e)=>{
this.checkDateFormat($(e))
}),$("input[type='time']").each((i,e)=>{
this.checkTimeFormat($(e))})},
addEventListeners:function(){},
addRequiredFieldIndicators:function(){
$(".needForTableLab").each((i,e)=>{
$(e).html("<span class='hideView' style='color:blue'>#</span>"+$(e).html())
}),$(".requiredLab").each((i,e)=>{
$(e).html("<span class='hideView' style='color:red'>*</span>"+$(e).html())
})},isValidTime:function(timeString){
var regEx="^(((([0-1][0-9])|(2[0-3])):[0-5][0-9]))$"
;if(!timeString.match(regEx))return false;else return true
},isTimeSupported:function(){
var input=document.createElement("input")
;input.setAttribute("type","time")
;var supported=true
;if("time"!==input.type)supported=false
;return this.timeSupported=supported,input.remove(),
supported},timeSupported:true,
checkTimeFormat:function($timeInput){
if(!this.timeSupported){
$timeInput.next(".timeWarning").remove()
;var time=$timeInput.val(),isValid=this.isValidTime(time)
;if(!isValid)$timeInput.after('<div class="text-danger timeWarning">Enter time as "hh:mm" in 24-hr format</div>')
;this.resize()}},isValidDate:function(dateString){
var regEx=/^\d{4}-\d{2}-\d{2}$/
;if(!dateString.match(regEx))return false
;var d=new Date(dateString),dNum=d.getTime()
;if(!dNum&&0!==dNum)return false
;return d.toISOString().slice(0,10)===dateString},
isDateSupported:function(){
var input=document.createElement("input")
;input.setAttribute("type","date")
;var supported=true
;if("date"!==input.type)supported=false
;return this.dateSupported=supported,input.remove(),
supported},dateSupported:true,
checkDateFormat:function($dateInput){
if(!this.dateSupported){
$dateInput.next(".dateWarning").remove()
;var date=$dateInput.val(),isValid=this.isValidDate(date)
;if(!isValid)$dateInput.after('<div class="text-danger dateWarning">Enter date as "YYYY-MM-DD"</div>')
;$dateInput.datepicker({dateFormat:"yy-mm-dd"
}),this.resize()}},setUpInitialState:function(){
$(".myLeftCol").addClass("col-12 col-sm-6 col-md-4 col-lg-3 text-left text-sm-right"),
this.isDateSupported(),
this.isTimeSupported(),$("input[type='date']").prop("placeholder","YYYY-MM-DD").on("change",e=>{
this.checkDateFormat($(e.currentTarget))
}),$("input[type='time']").prop("placeholder","hh:mm").on("change",e=>{
this.checkTimeFormat($(e.target))
}),$("textarea.autoAdjust").each((i,e)=>{
e.setAttribute("style","height:"+e.scrollHeight+"px;overflow-y:hidden;")
}).on("input",e=>{
e.target.style.height="auto",e.target.style.height=e.target.scrollHeight+"px",
this.resize()}),$(".toggleTable").on("click",e=>{
var tableID=$(e.currentTarget).data("table"),$table=$("#"+tableID),$errorMsg=$("#errorMsg")
;this.toggleTableFuncs($table,$errorMsg)
}),$(".toCSV").on("click",e=>{
var tableID=$(e.currentTarget).data("table"),dateToday=luxon.DateTime.now().toISODate(),fileName="table_"+tableID+"_"+dateToday,$errorMsg=$("#errorMsg")
;this.toCSVFuncs(fileName,tableID,$errorMsg)
}),$(".copyData").on("click",e=>{
var tableID=$(e.currentTarget).data("table"),tableSearch=this.tableSearch(tableID),$copyHead=$(".copyHead"+tableSearch),$transpose=$(".transpose"+tableSearch),$tableToCopy=$("#"+tableID),$tableDiv=$tableToCopy.parent(),$errorMsg=$("#errorMsg"),$divForCopy=$("#forCopy")
;this.copyDataFuncs($copyHead,$tableToCopy,$tableDiv,$errorMsg,$divForCopy,$transpose)
}),$(".addCage").on("click",e=>{
if(this.cageNums.length>0)var lastCage=this.cageNums[this.cageNums.length-1],cageNum=lastCage+1;else var cageNum=1
;this.addCage(cageNum)
}),$("#collapseCages").on("click",e=>{
this.collapseAllCageCards()
}),$("#addCare").on("click",e=>{
var cageNums=$("#cageSelect").val(),cageDisplayNames=$("#cageSelect option:selected").toArray().map(item=>item.text).join(", ")
;if(cageNums&&cageNums.length>0){
for(cageNum of cageNums)if(cageNum){
var date=$("#changeDate").val(),changeFood=this.getCheckState($("#changeFood")),changeWater=this.getCheckState($("#changeWater")),changeBottom=this.getCheckState($("#changeBottom")),changeTop=this.getCheckState($("#changeTop"))
;if(this.cages[cageNum].cageCareNums.length>0)var lastCare=this.cages[cageNum].cageCareNums[this.cages[cageNum].cageCareNums.length-1],careNum=lastCare+1;else var careNum=1
;this.addCare(cageNum,careNum,date,changeFood,changeWater,changeBottom,changeTop)
}
this.getCagesDue($("#dueDate").val()),this.makeDateCareTable($("#cageDate").val()),
this.makeDueDatesTable(),
$(".cageCaresTable").html(""),$("#addCareNotes").text("Added care for "+cageDisplayNames+" on "+luxon.DateTime.fromISO(date).toLocaleString(luxon.DateTime.DATE_HUGE))
}else $("#addCareNotes").text("Select at least one cage")
}),$("#the_form").on("input",e=>{
if($(e.target).data("watch"))this.watchValue($(e.target));else this.updateCalcFromEl(e.target)
}),$("input, select, textarea").each((i,e)=>{
if("button"!=$(e).attr("type"))if($(e).data("watch"))this.watchValue($(e));else this.updateCalcFromEl(e)
});var dateToday=luxon.DateTime.now().toISODate()
;$("#changeDate").val(dateToday),
$("#dueDate").val(dateToday).on("change",e=>{
this.getCagesDue($(e.currentTarget).val())
}).each((i,e)=>{this.getCagesDue($(e).val())
}),$("#careDate").val(dateToday).on("change",e=>{
this.makeDateCareTable($(e.currentTarget).val())
}).each((i,e)=>{this.makeDateCareTable($(e).val())
}),this.makeDueDatesTable(),$("#cageSelect").attr("size",Math.min(this.cageNums.length,15)),
$("#selFood").on("click",e=>{
this.selectFood($("#changeDate").val())
}),$("#selFoodWater").on("click",e=>{
this.selectFoodWater($("#changeDate").val())
}),$("#selBottom").on("click",e=>{
this.selectCageBottom($("#changeDate").val())
}),$("#selTop").on("click",e=>{
this.selectCageTop($("#changeDate").val())
}),$(".htmlCardHeader").on("click",e=>{
this.toggleCard($(e.currentTarget))
}),this.resize()},getCheckState:function($el){
var checkState=false
;if($el.is(":checked"))checkState=true
;return checkState},resize:function(){
this.parent_class.resize_container()},
checkForNames:function(){
$("input, select, textarea").each((i,e)=>{
var thisName=$(e).attr("name")
;if(!thisName)console.log("There is no name attribute for: ",e.id);else{
var hasUpper=/[A-Z]/.test(thisName)
;if(hasUpper)console.log("The name contains an uppercase letter for: ",e.id)
}})},getDynamicContent:function(){
var dynamicContent={};return dynamicContent},
data_valid_form:function($errorMsg){
var valid=true,fail_log=$("<div></div>").append("Missing values for:"),name
;if($(".needForTable").each((i,e)=>{
if(!$(e).val())valid=false,name=$(e).attr("id"),
fail_log.append("<br/>"+name)
}),!valid)$errorMsg.html("<span style='color:red; font-size:36px;'>"+"Please fill out all elements marked by a"+"</span><span style='color:blue; font-size:36px;'>"+" blue #"+"</span>"),
$errorMsg.append(fail_log);else $errorMsg.html("")
;return this.resize(),valid},
runIfConfirmed:function(text,functionToCall,elForHeight=null){
var thisMessage="Are you sure?"
;if(text)thisMessage=text;var top="auto"
;if(elForHeight)top=elForHeight.offsetTop+"px"
;bootbox.confirm({message:thisMessage,
callback:proceed=>{if(proceed)functionToCall()}
}),$(".modal-dialog").css("top",top)},
dialogConfirm:function(text,functionToCall,elForHeight=null){
var thisMessage="Do you want to proceed?"
;if(text)thisMessage=text;var top="auto"
;if(elForHeight)top=elForHeight.offsetTop+"px"
;bootbox.confirm({message:thisMessage,
callback:result=>{functionToCall(result)}
}),$(".modal-dialog").css("top",top)},
runBasedOnInput:function(prompt,functionToCall,elForHeight=null){
var thisTitle="Enter value:"
;if(prompt)thisTitle=prompt;var top="auto"
;if(elForHeight)top=elForHeight.offsetTop+"px"
;bootbox.prompt({title:thisTitle,
callback:result=>{functionToCall(result)}
}),$(".modal-dialog").css("top",top)},
checkInArray:function(searchVal,array){
var proceed=-1!==$.inArray(searchVal,array)
;return proceed},
dataSearch:function(dataName,dataValue){
var dataSearch="[data-"+dataName+"='"+dataValue+"']"
;return dataSearch},tableSearch:function(table){
var tableSearch=this.dataSearch("table",table)
;return tableSearch},calcSearch:function(calc){
var calcSearch=this.dataSearch("calc",calc)
;return calcSearch},daySearch:function(day){
var daySearch=this.dataSearch("day",day)
;return daySearch},mouseSearch:function(mouse){
var mouseSearch=this.dataSearch("mouse",mouse)
;return mouseSearch},cageSearch:function(cage){
var cageSearch=this.dataSearch("cage",cage)
;return cageSearch},updateCalcFromEl:function(el){
var calc=el.id,val=el.value,calcSearch=this.calcSearch(calc)
;$(calcSearch).html(val),this.resize()},
updateCalcFromVal:function(calc,val){
var calcSearch=this.calcSearch(calc)
;$(calcSearch).text(val),this.resize()},
watchValue:function($el){
var watch=$el.data("watch"),calcSearch=this.calcSearch(watch),cageNum=$el.data("cage"),val=$el.val()
;if(cageNum)calcSearch+=this.cageSearch(cageNum)
;if("cageID"==watch)if(!val)val="Cage "+cageNum
;$(calcSearch).text(val),this.resize()},
toggleTableFuncs:function($table,$errorMsg){
this.data_valid_form($errorMsg),$table.toggle(),
this.resize()},
toCSVFuncs:function(fileName,tableID,$errorMsg){
var data_valid=this.data_valid_form($errorMsg)
;if(data_valid)this.exportTableToCSV(fileName,tableID),
$errorMsg.html("<span style='color:grey; font-size:24px;'>Saved successfully</span>");else $errorMsg.append("<br/><span style='color:grey; font-size:24px;'>Did not export</span>")
},downloadCSV:function(csv,filename){
var csvFile,downloadLink;csvFile=new Blob([csv],{
type:"text/csv"
}),downloadLink=document.createElement("a"),downloadLink.download=filename,
downloadLink.href=window.URL.createObjectURL(csvFile),
downloadLink.style.display="none",
document.body.appendChild(downloadLink),downloadLink.click()
},exportTableToCSV:function(filename,table){
var tableArray=this.getTableArray($("#"+table),copyHead=true,transpose=false),tableString=this.convertRowArrayToString(tableArray,",","\n")
;this.downloadCSV(tableString,filename)},
copyDataFuncs:function($copyHead,$tableToCopy,$tableDiv,$errorMsg,$divForCopy,$transpose){
var data_valid=this.data_valid_form($errorMsg),copyHead=false,transpose=false
;if($copyHead.is(":checked"))copyHead=true
;if($transpose.is(":checked"))transpose=true
;if(data_valid)$tableDiv.show(),this.resize(),
this.copyTable($tableToCopy,copyHead,$divForCopy,$errorMsg,transpose),
$errorMsg.html("<span style='color:grey; font-size:24px;'>Copied successfully</span>");else $errorMsg.append("<br/><span style='color:grey; font-size:24px;'>Nothing was copied</span>")
},
copyTable:function($table,copyHead,$divForCopy,$errorMsg,transpose){
var tableArray=this.getTableArray($table,copyHead,transpose),tableString=this.convertRowArrayToString(tableArray,"\t","\n")
;this.copyStringToClipboard(tableString,$divForCopy,$errorMsg)
},
getTableArray:function($table,copyHead,transpose){
var rows=[],rowNum=0
;if(copyHead)$table.find("thead").children("tr").each((i,e)=>{
if(transpose)rowNum=0
;if($(e).find("td, th").each((i,e)=>{
if(void 0===rows[rowNum])rows[rowNum]=[]
;if(rows[rowNum].push($(e).text()),transpose)rowNum++
}),!transpose)rowNum++})
;return $table.find("tbody").children("tr").each((i,e)=>{
if(transpose)rowNum=0
;if($(e).find("td, th").each((i,e)=>{
if(void 0===rows[rowNum])rows[rowNum]=[]
;if(rows[rowNum].push($(e).text()),transpose)rowNum++
}),!transpose)rowNum++}),rows},
convertRowArrayToString:function(rowArray,cellSepString="\t",newRowString="\n"){
var rowString=[];rowArray.forEach(row=>{
if(row.length)row.forEach((cell,i)=>{
if(cell.includes(cellSepString)||cell.includes(newRowString))row[i]='"'+cell+'"'
}),rowString.push(row.join(cellSepString))})
;var tableString=rowString.join(newRowString)
;return tableString},
copyStringToClipboard:function(textStr,$divForCopy,$errorMsg){
var $temp=$("<text"+"area style='opacity:0;'></text"+"area>")
;if(textStr)errorStr="Copy attempted",
$errorMsg.html("<span style='color:grey; font-size:24px;'>Copy attempted</span>");else textStr=" ",
$errorMsg.html("<span style='color:red; font-size:24px;'>Nothing to copy</span>")
;$temp.text(textStr),
$temp.appendTo($divForCopy).select(),document.execCommand("copy"),
$temp.remove(),this.resize()},
toggleCard:function($cardHead){
$cardHead.next().toggleClass("collapse"),$cardHead.next().find("textarea.autoAdjust").each((i,e)=>{
if(!$(e).is(":hidden"))e.setAttribute("style","height:"+e.scrollHeight+"px;overflow-y:hidden;")
}),this.resize()},collapseAllCageCards:function(){
$(".cageCard").find(".card-header").each((i,e)=>{
$(e).next().addClass("collapse")}),this.resize()},
makeCard:function($div,cardHeadContent,cardBodyContent){
$div.append($("<div></div>",{class:"card"
}).append($("<button></button>",{type:"button",
class:"card-header"}).on("click",e=>{
this.toggleCard($(e.currentTarget))
}).append(cardHeadContent)).append($("<div></div>",{
class:"card-body collapse"
}).append(cardBodyContent))),this.resize()},
addCage:function(cageNum){
var inArray=this.checkInArray(cageNum,this.cageNums)
;if(!inArray)this.cageNums.push(cageNum),
this.cages[cageNum]={cageID:"",cageLoc:"",
cageType:"",startCage:"",endCage:"",
cageCareNums:[],cageCares:{}
},this.makeCageCard(cageNum)},
makeCageCard:function(cageNum){
var $div=$("#cageCardDiv")
;if(!$div.find(".card").length)$div.html("")
;var row="row mt-2",col="col-12 col-lg-6"
;$div.append($("<div/>",{
class:"col col-md-6 mt-2 cageCard",
"data-cage":cageNum}))
;var $cageDiv=$(".cageCard"+this.cageSearch(cageNum)),header=$("<div></div>",{
class:"cageIDCalc","data-calc":"cageID",
"data-cage":cageNum
}).append("Cage "+cageNum),$body=this.makeCageCardBody(cageNum)
;this.makeCard($cageDiv,header,$body),
$("#cageSelect").append($("<option></option>",{
value:cageNum,class:"cageIDCalc",
"data-calc":"cageID","data-cage":cageNum
}).append("Cage "+cageNum)).attr("size",Math.min(this.cageNums.length,15))
},makeCageCardBody:function(cageNum){
var $body=$("<div></div>"),initialRows=[{
label:"<h4>Cage ID:</h4>",type:"text",
className:"cageID",addRowClass:" updateCageObj"},{
label:"Cage #:",type:"number",className:"barcode",
addRowClass:" updateCageObj"},{label:"Delete:",
type:"button",className:"deleteCage",
optionsObj:[],addRowClass:" hideView"},{
label:"Cage location:",type:"text",
className:"cageLoc",addRowClass:" updateCageObj"
},{label:"Cage type:",type:"select",
className:"cageType",addRowClass:" updateCageObj",
optionsObj:[{value:"",text:"[Select]"},{
value:"ventilated",text:"Ventilated"},{
value:"static",text:"Static"},{value:"lbn",
text:"LBN"}]},{label:"Start cage:",type:"date",
className:"startCage",addRowClass:" updateCageObj"
},{label:"End cage:",type:"date",
className:"endCage",addRowClass:" updateCageObj"
},{label:"Show care activites",type:"button",
className:"showCare"}]
;for(row of initialRows)$body.append(this.makeRowFromObj(row,cageNum))
;return $body.find(".deleteCage").prop("value","Delete Cage").on("click",e=>{
this.deleteCageFuncs(cageNum)
}),$body.find(".showCare").prop("value","Show cares").on("click",e=>{
this.makeCageCareTable(cageNum)
}),$body.find(".updateCageObj").on("change",e=>{
var $el=$(e.target),val=$el.val()
;valSafe=this.encodeHTML(val)
;var thisProp=$el.data("watch")
;this.cages[cageNum][thisProp]=valSafe,this.makeDueDatesTable()
}),$body},encodeHTML:function(dirtyString){
var container=document.createElement("div"),text=document.createTextNode(dirtyString)
;return container.appendChild(text),
container.innerHTML},
makeRow:function(label,$input,addRowClass=""){
var myLeftCol="col-12 col-lg-6"
;if(addRowClass)addRowClass=" "+addRowClass
;var $label=$("<label></label>",{
for:$input.attr("id")
}).append(label),$row=$("<div></div>",{
class:"row mt-2"+addRowClass
}).append($("<div></div>",{class:myLeftCol
}).append($label)).append($("<div></div>",{
class:"col"}).append($input));return $row},
makeInput:function(inputType,className,cageNum,optionsObj){
var lowerCaseName=className.toLowerCase()
;if("select"===inputType)for(option of($input=$("<select></select>",{
name:lowerCaseName+cageNum,id:className+cageNum,
class:className+" fullWidth watch",
"data-watch":className,"data-cage":cageNum
}),optionsObj))$input.append($("<option></option>",{
value:option.value
}).append(option.text));else if("textarea"===inputType)$input=$("<tex"+"tarea></tex"+"tarea>",{
name:lowerCaseName+cageNum,id:className+cageNum,
class:className+" fullWidth watch autoAdjust",
"data-watch":className,"data-cage":cageNum
}).on("input",e=>{
this.updateTextarea(e.currentTarget)
});else var $input=$("<input></input>",{
type:inputType,name:lowerCaseName+cageNum,
id:className+cageNum,
class:className+" fullWidth watch",
"data-watch":className,"data-cage":cageNum})
;if("time"===inputType)$input.each((i,e)=>{
this.checkTimeFormat($(e))}).on("change",e=>{
this.checkTimeFormat($(e.currentTarget))})
;if("date"===inputType)$input.each((i,e)=>{
this.checkDateFormat($(e))}).on("change",e=>{
this.checkDateFormat($(e.currentTarget))})
;return $input},
makeRowFromObj:function(obj,cageNum){
var $row=this.makeRow(obj.label,this.makeInput(obj.type,obj.className,cageNum,obj.optionsObj),obj.addRowClass)
;return $row},deleteCageFuncs:function(cageNum){
this.runIfConfirmed("Are you sure that you wish to delete this cage?",()=>{
var index=this.cageNums.indexOf(cageNum)
;if(index>-1)this.cageNums.splice(index,1)
;delete this.cages[cageNum]
;var cageSearch=this.cageSearch(cageNum)
;$(".cageCard"+cageSearch).remove(),$(cageSearch).remove()
}),this.resize()},
deleteCareFuncs:function(cageNum,careNum){
this.runIfConfirmed("Are you sure that you wish to delete this care?",()=>{
var index=this.cages[cageNum].cageCareNums.indexOf(careNum)
;if(index>-1)this.cages[cageNum].cageCareNums.splice(index,1)
;delete this.cages[cageNum].cageCares[careNum],
this.makeDueDatesTable(),this.getCagesDue($("#dueDate").val()),
this.makeDateCareTable($("#careDate").val()),
this.makeCageCareTable(cageNum)}),this.resize()},
addCare:function(cageNum,careNum,date,changeFood,changeWater,changeBottom,changeTop){
var inArray=this.checkInArray(careNum,this.cages[cageNum].cageCareNums)
;if(!inArray)this.cages[cageNum].cageCareNums.push(careNum),
this.cages[cageNum].cageCares[careNum]={date:date,
food:changeFood,water:changeWater,
cageBottom:changeBottom,cageTop:changeTop}},
careLabels:["date","food","water","cageBottom","cageTop"],
makeCageCareTable:function(cageNum){
var cageCareNums=this.cages[cageNum].cageCareNums,cageCares=this.cages[cageNum].cageCares,labels=this.careLabels
;const tableData=[],cageCareAddedNums=[]
;for(cageCareNum of cageCareNums){
var cageCare=cageCares[cageCareNum],row=[]
;for(label of labels)row.push(cageCare[label])
;tableData.unshift(row),cageCareAddedNums.unshift(cageCareNum)
}
tableData.unshift(labels),cageCareAddedNums.unshift(NaN)
;var cageID=this.cages[cageNum].cageID
;if(!cageID)cageID="Cage "+cageNum
;if($("#tableInfo").text(cageID),$tableDiv=$(".cageCaresTable"),
this.createTable(tableData,true,false,$tableDiv),
"view"!==this.mode&&"view_dev"!==this.mode)$tableDiv.find("tr").each((i,e)=>{
if(0==i)$(e).append($("<th></th>").append("Delete"));else cageCareNum=cageCareAddedNums[i],
console.log("cageCareNum",cageCareNum),
$(e).append($("<td></td>").append($("<input></input>",{
"data-cage":cageNum,"data-care":cageCareNum,
value:"Delete care",
id:"deleteCare"+cageNum+cageCareNum,
class:"deleteCare",type:"button"}).on("click",e=>{
var cageNum=$(e.currentTarget).data("cage"),careNum=$(e.currentTarget).data("care")
;this.deleteCareFuncs(cageNum,careNum)})))})},
makeDateCareTable:function(matchDate){
var cageNums=this.cageNums,cages=this.cages,labels=this.careLabels
;const tableData=[["cageID"].concat(labels)]
;for(cageNum of cageNums){
var cageCareNums=cages[cageNum].cageCareNums,cageCares=cages[cageNum].cageCares
;for(cageCareNum of cageCareNums){
var cageCare=cageCares[cageCareNum]
;if(cageCare.date==matchDate){var row=[]
;for(label of(row.push(cages[cageNum].cageID),
labels))row.push(cageCare[label])
;tableData.push(row)}}}
$tableDiv=$(".caresOnDateTable"),this.createTable(tableData,true,false,$tableDiv)
},getWaterDueDate:function(cageNum){
var dueDate,dateToday=luxon.DateTime.now().toISODate(),cages=this.cages,cage=cages[cageNum],cageCareNums=cage.cageCareNums,cageCares=cage.cageCares,startDate=cage.startCage,endDate=cage.endCage,cageType=cage.cageType
;if(startDate&&!endDate&&("static"===cageType||"lbn"===cageType)){
var latestDate=void 0
;for(cageCareNum of cageCareNums){
var cageCare=cageCares[cageCareNum]
;if(cageCare.water&&(void 0===latestDate||cageCare.date>latestDate))latestDate=cageCare.date
}
if(void 0===latestDate)dueDate=dateToday;else if("lbn"===cageType)dueDate=this.addDays(latestDate,1);else dueDate=this.addDays(latestDate,7)
}return dueDate},
isDueForWater:function(cageNum,dueDate=luxon.DateTime.now().toISODate()){
var isDue=false,cages=this.cages,cage=cages[cageNum],cageCareNums=cage.cageCareNums,cageCares=cage.cageCares,startDate=cage.startCage,endDate=cage.endCage,cageType=cage.cageType
;if(startDate&&startDate<dueDate&&(!endDate||endDate>dueDate)&&("static"===cageType||"lbn"===cageType)){
var latestDate=void 0
;for(cageCareNum of cageCareNums){
var cageCare=cageCares[cageCareNum]
;if(cageCare.water&&(void 0===latestDate||cageCare.date>latestDate)&&cageCare.date<=dueDate)latestDate=cageCare.date
}
if(void 0===latestDate||"lbn"==cageType&&latestDate<dueDate||this.addDays(latestDate,7)<=dueDate)isDue=true
}return isDue},
getCagesDueForWater:function(dueDate=luxon.DateTime.now().toISODate()){
var cageNums=this.cageNums;const cagesDue=[]
;for(cageNum of cageNums){
var isDue=this.isDueForWater(cageNum,dueDate)
;if(isDue)cagesDue.push(cageNum)}return cagesDue},
getFoodDueDate:function(cageNum){
var dueDate,dateToday=luxon.DateTime.now().toISODate(),cages=this.cages,cage=cages[cageNum],cageCareNums=cage.cageCareNums,cageCares=cage.cageCares,startDate=cage.startCage,endDate=cage.endCage,cageType=cage.cageType
;if(startDate&&!endDate){var latestDate=void 0
;for(cageCareNum of cageCareNums){
var cageCare=cageCares[cageCareNum]
;if(cageCare.food&&(void 0===latestDate||cageCare.date>latestDate))latestDate=cageCare.date
}
if(void 0===latestDate)dueDate=dateToday;else if("lbn"===cageType)dueDate=this.addDays(latestDate,1);else if("static"==cageType)dueDate=this.addDays(latestDate,7);else dueDate=this.addDays(latestDate,14)
}return dueDate},
isDueForFood:function(cageNum,dueDate=luxon.DateTime.now().toISODate()){
var isDue=false,cages=this.cages,cage=cages[cageNum],cageCareNums=cage.cageCareNums,cageCares=cage.cageCares,startDate=cage.startCage,endDate=cage.endCage,cageType=cage.cageType
;if(startDate&&startDate<dueDate&&(!endDate||endDate>dueDate)){
var latestDate=void 0
;for(cageCareNum of cageCareNums){
var cageCare=cageCares[cageCareNum]
;if(cageCare.food&&(void 0===latestDate||cageCare.date>latestDate)&&cageCare.date<=dueDate)latestDate=cageCare.date
}
if(void 0===latestDate||"lbn"===cageType&&latestDate<dueDate||"static"===cageType&&this.addDays(latestDate,7)<=dueDate||this.addDays(latestDate,14)<=dueDate)isDue=true
}return isDue},
getCagesDueForFood:function(dueDate=luxon.DateTime.now().toISODate()){
var cageNums=this.cageNums;const cagesDue=[]
;for(cageNum of cageNums){
var isDue=this.isDueForFood(cageNum,dueDate)
;if(isDue)cagesDue.push(cageNum)}return cagesDue},
getBottomDueDate:function(cageNum){
var dueDate,dateToday=luxon.DateTime.now().toISODate(),cages=this.cages,cage=cages[cageNum],cageCareNums=cage.cageCareNums,cageCares=cage.cageCares,startDate=cage.startCage,endDate=cage.endCage,cageType=cage.cageType
;if(startDate&&!endDate){var latestDate=void 0
;for(cageCareNum of cageCareNums){
var cageCare=cageCares[cageCareNum]
;if(cageCare.cageBottom&&(void 0===latestDate||cageCare.date>latestDate))latestDate=cageCare.date
}
if(void 0===latestDate)dueDate=dateToday;else if("lbn"===cageType||"static"===cageType)dueDate=this.addDays(latestDate,7);else dueDate=this.addDays(latestDate,14)
}return dueDate},
isDueForBottom:function(cageNum,dueDate=luxon.DateTime.now().toISODate()){
var isDue=false,cages=this.cages,cage=cages[cageNum],cageCareNums=cage.cageCareNums,cageCares=cage.cageCares,startDate=cage.startCage,endDate=cage.endCage,cageType=cage.cageType
;if(startDate&&startDate<dueDate&&(!endDate||endDate>dueDate)){
var latestDate=void 0
;for(cageCareNum of cageCareNums){
var cageCare=cageCares[cageCareNum]
;if(cageCare.cageBottom&&(void 0===latestDate||cageCare.date>latestDate)&&cageCare.date<=dueDate)latestDate=cageCare.date
}
if(void 0===latestDate||("static"===cageType||"lbn"===cageType)&&this.addDays(latestDate,7)<=dueDate||this.addDays(latestDate,14)<=dueDate)isDue=true
}return isDue},
getCagesDueForBottom:function(dueDate=luxon.DateTime.now().toISODate()){
var cageNums=this.cageNums;const cagesDue=[]
;for(cageNum of cageNums){
var isDue=this.isDueForBottom(cageNum,dueDate)
;if(isDue)cagesDue.push(cageNum)}return cagesDue},
getTopDueDate:function(cageNum){
var dueDate,dateToday=luxon.DateTime.now().toISODate(),cages=this.cages,cage=cages[cageNum],cageCareNums=cage.cageCareNums,cageCares=cage.cageCares,startDate=cage.startCage,endDate=cage.endCage
;if(startDate&&!endDate){var latestDate=void 0
;for(cageCareNum of cageCareNums){
var cageCare=cageCares[cageCareNum]
;if(cageCare.cageTop&&(void 0===latestDate||cageCare.date>latestDate))latestDate=cageCare.date
}
if(void 0===latestDate)dueDate=dateToday;else dueDate=this.addDays(latestDate,90)
}return dueDate},
isDueForTop:function(cageNum,dueDate=luxon.DateTime.now().toISODate()){
var isDue=false,cages=this.cages,cage=cages[cageNum],cageCareNums=cage.cageCareNums,cageCares=cage.cageCares,startDate=cage.startCage,endDate=cage.endCage
;if(startDate&&startDate<dueDate&&(!endDate||endDate>dueDate)){
var latestDate=void 0
;for(cageCareNum of cageCareNums){
var cageCare=cageCares[cageCareNum]
;if(cageCare.cageTop&&(void 0===latestDate||cageCare.date>latestDate)&&cageCare.date<=dueDate)latestDate=cageCare.date
}
if(void 0===latestDate||this.addDays(latestDate,90)<=dueDate)isDue=true
}return isDue},
getCagesDueForTop:function(dueDate=luxon.DateTime.now().toISODate()){
var cageNums=this.cageNums,cages=this.cages
;const cagesDue=[];for(cageNum of cageNums){
var isDue=this.isDueForTop(cageNum,dueDate)
;if(isDue)cagesDue.push(cageNum)}return cagesDue},
getCagesDue:function(dueDate=luxon.DateTime.now().toISODate()){
var cageBottomsToChange=this.getCagesDueForBottom(dueDate),cageTopsToChange=this.getCagesDueForTop(dueDate),foodToChange=this.getCagesDueForFood(dueDate),waterToChange=this.getCagesDueForWater(dueDate),namesBottoms=this.getCageNamesArray(cageBottomsToChange),namesTops=this.getCageNamesArray(cageTopsToChange),namesFood=this.getCageNamesArray(foodToChange),namesWater=this.getCageNamesArray(waterToChange)
;this.printCages(namesBottoms,$(".cageBottomsList")),
this.printCages(namesTops,$(".cageTopsList")),
this.printCages(namesFood,$(".foodCageList")),
this.printCages(namesWater,$(".waterCageList")),
this.resize()},
selectFood:function(dueDate=luxon.DateTime.now().toISODate()){
var foodToChange=this.getCagesDueForFood(dueDate)
;$("#cageSelect").val(foodToChange),
$("#changeWater").prop("checked",false),$("#changeFood").prop("checked",true),
$("#changeBottom").prop("checked",false),
$("#changeTop").prop("checked",false)},
selectFoodWater:function(dueDate=luxon.DateTime.now().toISODate()){
var foodToChange=this.getCagesDueForFood(dueDate),waterToChange=this.getCagesDueForWater(dueDate),comboCages=Array.from(new Set(foodToChange.concat(waterToChange)))
;$("#cageSelect").val(comboCages),
$("#changeWater").prop("checked",true),$("#changeFood").prop("checked",true),
$("#changeBottom").prop("checked",false),
$("#changeTop").prop("checked",false)},
selectCageBottom:function(dueDate=luxon.DateTime.now().toISODate()){
var cageBottomsToChange=this.getCagesDueForBottom(dueDate)
;$("#cageSelect").val(cageBottomsToChange),
$("#changeWater").prop("checked",false),
$("#changeFood").prop("checked",true),$("#changeBottom").prop("checked",true),
$("#changeTop").prop("checked",false)},
selectCageTop:function(dueDate=luxon.DateTime.now().toISODate()){
var cageTopsToChange=this.getCagesDueForTop(dueDate)
;$("#cageSelect").val(cageTopsToChange),
$("#changeWater").prop("checked",false),
$("#changeFood").prop("checked",true),$("#changeBottom").prop("checked",true),
$("#changeTop").prop("checked",true)},
getCageNamesArray:function(cageNumArray){
var names=[];for(cageNum of cageNumArray){
var thisID=this.cages[cageNum].cageID
;if(!thisID)thisID="Cage "+cageNum
;names.push(thisID)}return names},
printCages:function(cagesArray,$div){
cagesArrayClean=this.encodeHTML(cagesArray).split(","),
$div.html(cagesArrayClean.join("<br/>"))},
addDays:function($startDateVal,numDays){
var newDate=luxon.DateTime.fromISO($startDateVal).plus({
days:numDays}).toISODate();return newDate},
createTable:function(tableData,makeFirstRowHead=false,makeFirstColHead=false,$tableDiv){
var table=document.createElement("table")
;table.classList.add("table")
;var tableBody=document.createElement("tbody")
;if(tableData.forEach((rowData,rowNum)=>{
var row=document.createElement("tr")
;rowData.forEach((cellData,colNum)=>{
if(makeFirstRowHead&&0==rowNum||makeFirstColHead&&0==colNum)var cell=document.createElement("th");else var cell=document.createElement("td")
;cell.appendChild(document.createTextNode(cellData)),
row.appendChild(cell)}),tableBody.appendChild(row)
}),table.appendChild(tableBody),
void 0===$tableDiv||!$tableDiv)console.log("appending generally"),
document.body.appendChild(table);else $tableDiv.html(""),
$tableDiv.append(table);this.resize()},
getDueDatesForCage:function(cageNum){
var waterDate=this.getWaterDueDate(cageNum),foodDate=this.getFoodDueDate(cageNum),bottomDate=this.getBottomDueDate(cageNum),topDate=this.getTopDueDate(cageNum)
;return this.cages[cageNum].water=waterDate,
this.cages[cageNum].food=foodDate,this.cages[cageNum].bottom=bottomDate,
this.cages[cageNum].top=topDate,{water:waterDate,
food:foodDate,bottom:bottomDate,top:topDate}},
allCageTableLabels:["cageID","cageLoc","cageType","food","water","bottom","top","barcode"],
makeDueDatesTable:function(){
var cageNums=this.cageNums,cages=this.cages,labels=this.allCageTableLabels
;const tableData=[labels]
;for(cageNum of cageNums){
this.getDueDatesForCage(cageNum)
;var cage=cages[cageNum],endDate=cage.endCage
;if(!endDate){var row=[];for(label of labels){
var val=cage[label];if(!val)val="";row.push(val)}
tableData.push(row)}}
$tableDiv=$(".dueDatesTable"),this.createTable(tableData,true,false,$tableDiv),
$tableDiv.find("td").each((i,e)=>{
var text=$(e).text();if(this.isValidDate(text)){
if(text<=luxon.DateTime.now().toISODate())$(e).addClass("isDue")
;$(e).text(luxon.DateTime.fromISO(text).toLocaleString({
weekday:"short",month:"short",day:"2-digit"}))}})}
};