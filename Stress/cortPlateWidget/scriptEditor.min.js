my_widget_script={init:function(mode,json_data){
var parsedJson=this.parseInitJson(json_data)
;this.makePlates(),this.makeWellEntries(),
this.initDynamicContent(parsedJson),window.onresize=(()=>this.resize()),
this.addEventListeners(),
this.parent_class.init(mode,()=>JSON.stringify(parsedJson.widgetData)),
this.addRequiredFieldIndicators(),
this.setUpInitialState(),this.adjustForMode(mode),
this.checkForNames()},to_json:function(){
var widgetJsonString=this.parent_class.to_json(),dynamicContent=this.getDynamicContent(),output={
widgetData:JSON.parse(widgetJsonString)}
;return JSON.stringify(output)},
from_json:function(json_data){
var parsedJson=JSON.parse(json_data)
;this.parent_class.from_json(JSON.stringify(parsedJson.widgetData))
},test_data:function(){
var testData=JSON.parse(this.parent_class.test_data()),output={
widgetData:testData};return JSON.stringify(output)
},is_valid:function(b_suppress_message){
var fail=false,fail_log="",name
;if($("#the_form").find("select, textarea, input").each((i,e)=>{
if(!$(e).prop("required"));else if(!$(e).val())fail=true,
name=$(e).attr("id"),fail_log+=name+" is required \n"
}),$("input[type='date']").each((i,e)=>{
var date=$(e).val();if(date){
var validDate=this.isValidDate(date)
;if(!validDate)fail=true,fail_log+="Please enter valid date in form 'YYYY-MM-DD'"
}}),$("input[type='time']").each((i,e)=>{
var time=$(e).val();if(time){
var validtime=this.isValidTime(time)
;if(!validtime)fail=true,fail_log+="Please enter valid time in form 'hh:mm' - 24 hr time"
}}),fail)return bootbox.alert(fail_log);else{
var noErrors=[];return noErrors}},
is_edited:function(){
return this.parent_class.is_edited()},
reset_edited:function(){
return this.parent_class.reset_edited()},
parseInitJson:function(json_data){var jsonString
;if("string"===typeof json_data)jsonString=json_data;else jsonString=json_data()
;var parsedJson=JSON.parse(jsonString)
;return parsedJson},
initDynamicContent:function(parsedJson){},
adjustForMode:function(mode){
if("edit"!==mode&&"edit_dev"!==mode)$(".disableOnView").prop("disabled",true),
$("input[type='date']").removeClass(".hasDatePicker"),
$(".hideView").hide(),$("#entryContainer").insertAfter($("#platesWrapper")),
this.toggleCard($(".plateCard[data-plate='plateID']").find(".card-header"));else $("input[type='date']").each((i,e)=>{
this.checkDateFormat($(e))
}),$("input[type='time']").each((i,e)=>{
this.checkTimeFormat($(e))})},
addEventListeners:function(){},
addRequiredFieldIndicators:function(){
$(".needForTableLab").each((i,e)=>{
$(e).html("<span class='hideView' style='color:blue'>#</span>"+$(e).html())
}),$(".requiredLab").each((i,e)=>{
$(e).html("<span class='hideView' style='color:red'>*</span>"+$(e).html())
})},isValidTime:function(timeString){
var regEx="^(((([0-1][0-9])|(2[0-3])):[0-5][0-9]))$"
;if(!timeString.match(regEx))return false;else return true
},isTimeSupported:function(){
var input=document.createElement("input")
;input.setAttribute("type","time")
;var supported=true
;if("time"!==input.type)supported=false
;return this.timeSupported=supported,input.remove(),
supported},timeSupported:true,
checkTimeFormat:function($timeInput){
if(!this.timeSupported){
$timeInput.next(".timeWarning").remove()
;var time=$timeInput.val(),isValid=this.isValidTime(time)
;if(!isValid)$timeInput.after('<div class="text-danger timeWarning">Enter time as "hh:mm" in 24-hr format</div>')
;this.resize()}},isValidDate:function(dateString){
var regEx=/^\d{4}-\d{2}-\d{2}$/
;if(!dateString.match(regEx))return false
;var d=new Date(dateString),dNum=d.getTime()
;if(!dNum&&0!==dNum)return false
;return d.toISOString().slice(0,10)===dateString},
isDateSupported:function(){
var input=document.createElement("input")
;input.setAttribute("type","date")
;var supported=true
;if("date"!==input.type)supported=false
;return this.dateSupported=supported,input.remove(),
supported},dateSupported:true,
checkDateFormat:function($dateInput){
if(!this.dateSupported){
$dateInput.next(".dateWarning").remove()
;var date=$dateInput.val(),isValid=this.isValidDate(date)
;if(!isValid)$dateInput.after('<div class="text-danger dateWarning">Enter date as "YYYY-MM-DD"</div>')
;$dateInput.datepicker({dateFormat:"yy-mm-dd"
}),this.resize()}},setUpInitialState:function(){
$(".myLeftCol").addClass("col-12 col-sm-6 col-md-4 col-lg-3 text-left text-sm-right"),
this.isDateSupported(),
this.isTimeSupported(),$("input[type='date']").prop("placeholder","YYYY-MM-DD").on("change",e=>{
this.checkDateFormat($(e.currentTarget))
}),$("input[type='time']").prop("placeholder","hh:mm").on("change",e=>{
this.checkTimeFormat($(e.target))
}),$("textarea.autoAdjust").each((i,e)=>{
e.setAttribute("style","height:"+e.scrollHeight+"px;overflow-y:hidden;")
}).on("input",e=>{
e.target.style.height="auto",e.target.style.height=e.target.scrollHeight+"px",
this.resize()}),$(".toggleTable").on("click",e=>{
var tableID=$(e.currentTarget).data("table"),$table=$("#"+tableID)
;this.toggleTableFuncs($table)
}),$(".toCSV").on("click",e=>{
var tableID=$(e.currentTarget).data("table"),dateToday=luxon.DateTime.now().toISODate(),fileName="table_"+tableID+"_"+dateToday,$errorMsg=$("#errorMsg")
;this.toCSVFuncs(fileName,tableID,$errorMsg)
}),$(".copyPlate").on("click",e=>{
var copyHead=true,plateType=$(e.target).data("plate"),plateSearch=this.plateSearch(plateType),$tableToCopy=$(".plateImg"+plateSearch),$tableDiv=$(".plateDiv"+plateSearch),$errorMsg=$(".errorMsg"+plateSearch),$divForCopy=$(".forCopy"+plateSearch)
;this.copyDataFuncs(copyHead,$tableToCopy,$tableDiv,$errorMsg,$divForCopy)
}),$("#downloadCSV").on("click",e=>{
var date=$("#date").val(),fileName="cortPlate_"+date
;this.exportAllTablesToCSV(fileName)
}),$(".copyMouseIDs").on("click",e=>{
var $divForCopy=$("#forCopy"),listName=$(e.currentTarget).data("list")
;this.copyMouseIDs(listName,$divForCopy)
}),$("#idEntry2").each((i,e)=>{
this.fillSampleIDsFromList($(e))
}).on("change",e=>{
this.fillSampleIDsFromList($(e.currentTarget))
}),$(".calcTotal").on("change",e=>{
this.calcNumAssignedWells()
}),$("#updateEntries").on("click",()=>{
this.checkAndUpdateWells()
}),this.calcNumAssignedWells(),this.checkAndUpdateWells(),
$(".type").each((i,e)=>{this.fillByType($(e))
}).on("change",e=>{
this.fillByType($(e.currentTarget))
}),$("#the_form").on("input",e=>{
if($(e.target).data("watch"))this.watchValue($(e.target));else this.updateCalcFromEl(e.target)
}),$("input, select, textarea").each((i,e)=>{
if("button"!=$(e).attr("type"))if($(e).data("watch"))this.watchValue($(e));else this.updateCalcFromEl(e)
}),this.resize()},resize:function(){
this.parent_class.resize_container()},
checkForNames:function(){
$("input, select, textarea").each((i,e)=>{
var thisName=$(e).attr("name")
;if(!thisName)console.log("There is no name attribute for: ",e.id);else{
var hasUpper=/[A-Z]/.test(thisName)
;if(hasUpper)console.log("The name contains an uppercase letter for: ",e.id)
}})},getDynamicContent:function(){
var dynamicContent={};return dynamicContent},
data_valid_form:function($errorMsg){
var valid=true,fail_log=$("<div></div>").append("Missing values for:"),name
;if($(".needForTable").each((i,e)=>{
if(!$(e).val())valid=false,name=$(e).attr("id"),
fail_log.append("<br/>"+name)
}),!valid)$errorMsg.html("<span style='color:red; font-size:36px;'>"+"Please fill out all elements marked by a"+"</span><span style='color:blue; font-size:36px;'>"+" blue #"+"</span>"),
$errorMsg.append(fail_log);else $errorMsg.html("")
;return this.resize(),valid},
runIfConfirmed:function(text,functionToCall,elForHeight=null){
var thisMessage="Are you sure?"
;if(text)thisMessage=text;var top="auto"
;if(elForHeight)top=elForHeight.offsetTop+"px"
;bootbox.confirm({message:thisMessage,
callback:proceed=>{if(proceed)functionToCall()}
}),$(".modal-dialog").css("top",top)},
dialogConfirm:function(text,functionToCall,elForHeight=null){
var thisMessage="Do you want to proceed?"
;if(text)thisMessage=text;var top="auto"
;if(elForHeight)top=elForHeight.offsetTop+"px"
;bootbox.confirm({message:thisMessage,
callback:result=>{functionToCall(result)}
}),$(".modal-dialog").css("top",top)},
runBasedOnInput:function(prompt,functionToCall,elForHeight=null){
var thisTitle="Enter value:"
;if(prompt)thisTitle=prompt;var top="auto"
;if(elForHeight)top=elForHeight.offsetTop+"px"
;bootbox.prompt({title:thisTitle,
callback:result=>{functionToCall(result)}
}),$(".modal-dialog").css("top",top)},
checkInArray:function(searchVal,array){
var proceed=-1!==$.inArray(searchVal,array)
;return proceed},
dataSearch:function(dataName,dataValue){
var dataSearch="[data-"+dataName+"='"+dataValue+"']"
;return dataSearch},tableSearch:function(table){
var tableSearch=this.dataSearch("table",table)
;return tableSearch},calcSearch:function(calc){
var calcSearch=this.dataSearch("calc",calc)
;return calcSearch},watchSearch:function(watch){
var watchSearch=this.dataSearch("watch",watch)
;return watchSearch},daySearch:function(day){
var daySearch=this.dataSearch("day",day)
;return daySearch},mouseSearch:function(mouse){
var mouseSearch=this.dataSearch("mouse",mouse)
;return mouseSearch},plateSearch:function(plate){
var plateSearch=this.dataSearch("plate",plate)
;return plateSearch},wellSearch:function(well){
var wellSearch=this.dataSearch("well",well)
;return wellSearch},groupSearch:function(group){
var groupSearch=this.dataSearch("group",group)
;return groupSearch},
updateCalcFromEl:function(el){
var calc=el.id,val=el.value,calcSearch=this.calcSearch(calc)
;$(calcSearch).html(val),this.resize()},
updateCalcFromVal:function(calc,val){
var calcSearch=this.calcSearch(calc)
;$(calcSearch).text(val),this.resize()},
watchValue:function($el){
var watch=$el.data("watch"),calcSearch=my_widget_script.calcSearch(watch),groupNum=$el.data("group"),mouseNum=$el.data("mouse"),val=$el.val()
;if(groupNum)calcSearch+=my_widget_script.groupSearch(groupNum)
;if(mouseNum)calcSearch+=my_widget_script.mouseSearch(mouseNum)
;if("plateID"==watch)if(!val);
if($(calcSearch).html(val),groupNum&&this.checkInArray(watch,this.entryTypes)){
var wellIDs=this.getWellIDsFromGroupNum(groupNum)
;this.fillWells(watch,wellIDs,val)}
my_widget_script.resize()},
toggleTableFuncs:function($table){
this.data_valid_form(),$table.toggle(),this.resize()
},toCSVFuncs:function(fileName,tableID,$errorMsg){
var data_valid=this.data_valid_form($errorMsg)
;if(data_valid)this.exportTableToCSV(fileName,tableID),
$errorMsg.html("<span style='color:grey; font-size:24px;'>Saved successfully</span>");else $errorMsg.append("<br/><span style='color:grey; font-size:24px;'>Did not export</span>")
},downloadCSV:function(csv,filename){
var csvFile,downloadLink;csvFile=new Blob([csv],{
type:"text/csv"
}),downloadLink=document.createElement("a"),downloadLink.download=filename,
downloadLink.href=window.URL.createObjectURL(csvFile),
downloadLink.style.display="none",
document.body.appendChild(downloadLink),downloadLink.click()
},exportTableToCSV:function(filename,table){
for(var csv=[],datatable=document.getElementById(table),rows=datatable.querySelectorAll("tr"),i=0;i<rows.length;i++){
for(var row=[],cols=rows[i].querySelectorAll("td, th"),j=0;j<cols.length;j++){
var cellText='"'+cols[j].innerText+'"'
;row.push(cellText)}csv.push(row.join(","))}
this.downloadCSV(csv.join("\n"),filename)},
createCSV:function($table){var csv=[]
;return $table.find("tr").each((i,e)=>{var row=[]
;$(e).find("td, th").each((i,e)=>{
var cellText='"'+e.innerText+'"'
;row.push(cellText)}),csv.push(row.join(","))
}),csv=csv.join("\n"),csv},
exportAllTablesToCSV:function(filename){
for(var csv=[],i=0;i<this.plateTypes.length;i++){
var plateType=this.plateTypes[i],$plate=$(".plateImg"+this.plateSearch(plateType))
;csv.push(this.createCSV($plate)),console.log(csv)
}this.downloadCSV(csv.join("\n\n"),filename)},
copyDataFuncs:function(copyHead=true,$tableToCopy,$tableDiv,$errorMsg,$divForCopy){
var data_valid=this.data_valid_form($errorMsg),transpose=false
;if(data_valid)$tableDiv.show(),
this.resize(),this.copyTable($tableToCopy,copyHead,$divForCopy,transpose),
$errorMsg.html("<span style='color:grey; font-size:24px;'>Copied successfully</span>");else $errorMsg.append("<br/><span style='color:grey; font-size:24px;'>Nothing was copied</span>")
},
copyTable:function($table,copyHead,$divForCopy,transpose){
var $temp=$("<text"+"area style='opacity:0;'></text"+"area>"),rows=[],rowNum=0
;if(copyHead)$table.find("thead").children("tr").each((i,e)=>{
if(transpose)rowNum=0
;if($(e).find("td, th").each((i,e)=>{
if(void 0===rows[rowNum])rows[rowNum]=[]
;if(rows[rowNum].push($(e).text()),transpose)rowNum++
}),!transpose)rowNum++})
;$table.find("tbody").children("tr").each((i,e)=>{
if(transpose)rowNum=0
;if($(e).find("td, th").each((i,e)=>{
if(void 0===rows[rowNum])rows[rowNum]=[]
;if(rows[rowNum].push($(e).text()),transpose)rowNum++
}),!transpose)rowNum++})
;for(var i=0;i<rows.length;i++)rows[i]=rows[i].join("\t")
;$temp.append(rows.join("\n")),
$temp.appendTo($divForCopy).select(),document.execCommand("copy"),
$temp.remove()},toggleCard:function($cardHead){
$cardHead.next().toggleClass("collapse"),
$cardHead.next().find("textarea.autoAdjust").each((i,e)=>{
if(!$(e).is(":hidden"))e.setAttribute("style","height:"+e.scrollHeight+"px;overflow-y:hidden;")
}),this.resize()},
makeCard:function($div,cardHeadContent,cardBodyContent){
$div.append($("<div></div>",{class:"card"
}).append($("<button></button>",{type:"button",
class:"card-header"}).on("click",e=>{
this.toggleCard($(e.currentTarget))
}).append(cardHeadContent)).append($("<div></div>",{
class:"card-body collapse"
}).append(cardBodyContent))),this.resize()},
plateTypes:["plateID","netOD","mouseID","time","type","stdPgPerWell","volPerWell","dilutionFactor"],
entryTypes:["plateID","mouseID","time","type","stdPgPerWell","volPerWell","dilutionFactor"],
entryTypesNice:["Label","Mouse","Time","Sample Type","STD pg/well","mL/well","Dilution Factor"],
sampleTypes:{"":{label:"blank",plateID:"",
mouseID:"",time:"",stdPgPerWell:"",volPerWell:"",
dilutionFactor:""},NSB:{label:"NSB",plateID:"NSB",
mouseID:"",time:"",stdPgPerWell:"",volPerWell:"",
dilutionFactor:""},STD:{label:"standard",
plateID:"STD",mouseID:"",time:"",volPerWell:.05,
dilutionFactor:1},bufferCtrl:{
label:"buffer control",plateID:"bufferCtrl",
mouseID:"",time:"",stdPgPerWell:"",volPerWell:"",
dilutionFactor:""},QC:{label:"quality control",
plateID:"C_2",mouseID:"",time:"",stdPgPerWell:"",
volPerWell:.05,dilutionFactor:100},sample:{
label:"sample",stdPgPerWell:"",volPerWell:.05,
dilutionFactor:100}},wellGroups:48,
cols:[1,2,3,4,5,6,7,8,9,10,11,12],
rows:["A","B","C","D","E","F","G","H"],
row1:["A","C","E","G"],row2:["B","D","F","H"],
makePlates:function(){
var $platesDiv=$("#platesWrapper")
;$platesDiv.html("")
;for(var i=0;i<this.plateTypes.length;i++){
var plateType=this.plateTypes[i],$div=this.makePlateDiv(plateType,i+1)
;$platesDiv.append($div)
;var $table=this.makePlateTable(plateType),plateSearch=this.plateSearch(plateType)
;$(".plateDiv"+plateSearch).append($table)}},
makePlateDiv:function(plateType,plateNum){
var $header="<h3>"+plateType+"</h3>",$body=$("<div></div>",{
class:"container mt-4 plateContainer",
"data-plate":plateType}).append($("<div></div>",{
class:"row mt-2"}).append($("<div></div>",{
class:"col-12 col-sm-6 col-md-3"
}).append($("<input></input>",{type:"button",
class:"copyPlate fullWidth",
"data-plate":plateType,value:"COPY PLATE",
name:"copyplate"+plateNum
})))).append($("<div></div>",{class:"row mt-2"
}).append($("<div></div>",{
class:"col-12 errorMsg","data-plate":plateType
})).append($("<div></div>",{
class:"col-12 forCopy","data-plate":plateType
}))).append($("<div></div>",{
class:"mt-2 table-responsive xsTableDiv plateDiv",
"data-plate":plateType})),$div=$("<div></div>",{
class:"plateCard","data-plate":plateType})
;return this.makeCard($div,$header,$body),$div},
makePlateTable:function(plateType){
var $table=$("<table></table>",{
class:"table plateImg","data-plate":plateType})
;$table.append($("<tr></tr>",{class:"row0"}))
;for(var $tableRow=$table.find(".row0"),col=0;col<13;col++)if(0==col)$tableRow.append($("<th></th>").append(plateType));else $tableRow.append($("<th></th>",{
class:"col"+col}).append(col))
;for(var rowLetters=["","A","B","C","D","E","F","G","H"],rowPairs1=[1,2,5,6],shading,row=1;row<9;row++){
$table.append($("<tr></tr>",{
class:"row"+rowLetters[row]
})),$tableRow=$table.find(".row"+rowLetters[row])
;for(var col=0;col<13;col++){
if(this.isEven(col))if(rowPairs1.includes(row))shading="light";else shading="dark";else if(rowPairs1.includes(row))shading="dark";else shading="light"
;if(0==col)$tableRow.append($("<th></th>",{
class:"row"+rowLetters[row]
}).append(rowLetters[row]));else $tableRow.append($("<td/>",{
class:"col"+col+" row"+rowLetters[row]+" well "+shading,
"data-well":col+rowLetters[row]}))}}return $table
},isEven:function(value){
if(value%2==0)return true;else return false},
makeWellEntries:function(){
for($("#entryWrapper").html(""),i=0;i<this.wellGroups;i++){
var wellGroup=i+1,$cardDiv=this.makeWellEntry(wellGroup)
;$("#entryWrapper").append($cardDiv)}},
makeWellEntry:function(wellGroup){
for(var $div=$("<div></div>",{
class:"col-6 col-md-4 col-lg-3 col-xl-2",
"data-group":wellGroup
}),$header=wellGroup+". <span data-group='"+wellGroup+"' data-calc='plateID'>Sample "+wellGroup+"</span>",inputTypes=this.entryTypes,$body=$("<div></div>",{
class:"container"}),i=0;i<inputTypes.length;i++){
var inputType=inputTypes[i],inputObject={
class:"fullWidth watch "+inputType,
id:inputType+wellGroup,
name:inputType.toLowerCase()+wellGroup,
"data-group":wellGroup,"data-watch":inputType
},$input
;if("type"===inputType)for(type in $input=$("<select></select>",inputObject),
this.sampleTypes)$input.append($("<option></option>",{
value:type
}).append(this.sampleTypes[type]["label"]));else{
if("mouseID"===inputType||"plateID"===inputType)inputObject.type="text";else inputObject.type="number"
;$input=$("<input></input>",inputObject)}
$body.append($("<div></div>",{class:"row",
"data-entry":inputType,"data-group":wellGroup
}).append($("<div></div>",{
class:"col-12 font-weight-bold"
}).append(this.entryTypesNice[i])).append($("<div></div>",{
class:"col"}).append($input)))}
return this.makeCard($div,$header,$body),$div},
getWellIDsFromGroupNum:function(wellGroup){
var well1,well2;if(wellGroup>0&&wellGroup<=48){
var colIndex=Math.ceil(wellGroup/4)-1,col=this.cols[colIndex],remainder=(wellGroup-1)%4,row1=this.row1[remainder],row2=this.row2[remainder]
;well1=col+row1,well2=col+row2}var wells={
well1:well1,well2:well2};return wells},
fillWells:function(plateType,wells,val){
var plateSearch=this.plateSearch(plateType),well1Search=this.wellSearch(wells.well1),well2Search=this.wellSearch(wells.well2)
;$(".plateImg"+plateSearch).find(".well"+well1Search).text(val),
$(".plateImg"+plateSearch).find(".well"+well2Search).text(val),
this.resize()},fillByType:function($sampleType){
var type=$sampleType.val(),infoObj=this.sampleTypes[type],wellGroup=$sampleType.data("group"),groupSearch=this.groupSearch(wellGroup),wellIDs=this.getWellIDsFromGroupNum(wellGroup)
;for(info in $(groupSearch+"[data-entry]").show(),
infoObj)if("label"!==info){
var watchSearch=this.watchSearch(info),entrySearch=this.dataSearch("entry",info),val=infoObj[info]
;if("STD"===val){
var currentVal=$(watchSearch+groupSearch).val()
;if(currentVal.startsWith("STD"))val=currentVal}
if($(watchSearch+groupSearch).val(val),
"plateID"===info)$(groupSearch+this.calcSearch("plateID")).text(val)
;if(this.fillWells(info,wellIDs,val),
!val)$(groupSearch+entrySearch).hide()}
this.resize()},calcNumAssignedWells:function(){
var total=0;if($(".calcTotal").each((i,e)=>{
if(e.value)total+=parseInt(e.value)
}),this.updateCalcFromVal("totalWellGroups",total),
total>48)return $(this.calcSearch("totalWellGroups")).css("color","red"),
$("#numWarning").text("You have entered too many samples to fit on the plate"),
false;else return $(this.calcSearch("totalWellGroups")).css("color","black"),
$("#numWarning").text(""),true},
checkAndUpdateWells:function(){
var numNSB=$("#numNSB").val(),numSTD=$("#numSTD").val(),numBuffer=$("#numBuffer").val(),numQC=$("#numQC").val(),numSamples=$("#numSamples").val()
;if(this.calcNumAssignedWells())console.log("trying to update"),
this.updateEntryWells(numNSB,numSTD,numBuffer,numQC,numSamples);else $("#numWarning").text("Did not update; too many samples")
;this.resize()},firstSampleGroup:0,
updateEntryWells:function(numNSB,numSTD,numBuffer,numQC,numSamples){
for(var i=0;i<this.wellGroups;i++){
var wellGroup=i+1,groupSearch=this.groupSearch(wellGroup),type
;if(numNSB>0)type="NSB",
numNSB--;else if(numSTD>0)type="STD",numSTD--;else if(numBuffer>0)type="bufferCtrl",
numBuffer--;else if(numQC>0)type="QC",
numQC--;else if(numSamples>0){
if(type="sample",numSamples--,0===this.firstSampleGroup)this.firstSampleGroup=wellGroup;else if(wellGroup<this.firstSampleGroup)this.firstSampleGroup=wellGroup
}else type="";$(".type"+groupSearch).val(type)
;var wellIDs=this.getWellIDsFromGroupNum(wellGroup)
;this.fillWells("type",wellIDs,type)}
this.updateSTDVals(),$(".type").each((i,e)=>{
this.fillByType($(e))}),this.resize()},
updateSTDVals:function(){
var stdVal=$("#largestSTD").val()
;stdVal=parseFloat(stdVal);var stdNum=0
;$(".type").each((i,e)=>{if("STD"===$(e).val()){
stdNum++
;var wellGroup=$(e).data("group"),wellGroupSearch=this.groupSearch(wellGroup)
;$(".plateID"+wellGroupSearch).val("STD "+stdNum),
$(".stdPgPerWell"+wellGroupSearch).val(stdVal)
;var wellIDs=this.getWellIDsFromGroupNum(wellGroup)
;this.fillWells("plateID",wellIDs,"STD "+stdNum),
this.fillWells("stdPgPerWell",wellIDs,stdVal),
stdVal/=2}}),this.resize()},
copyMouseIDs:function(listName,$divForCopy){
for(var $temp=$("<text"+"area style='opacity:0;'></text"+"area>"),addLine="",fullList=$("#"+listName).val(),splitList=fullList.split(/[\r\n]+/),addText,i=0;i<splitList.length;i++)mouseID=splitList[i],
$temp.text($temp.text()+addLine),
addLine="\n",totalText=mouseID+addLine+mouseID,
$temp.text($temp.text()+totalText)
;$temp.appendTo($divForCopy).select(),document.execCommand("copy"),
$temp.remove()},
fillSampleIDsFromList:function($list){
var fullList=$list.val(),splitList=fullList.split(/[\r\n]+/),currentNumSamples=$("#numSamples").val(),listLength=splitList.length
;if($("#numSamples").val(listLength),
!this.calcNumAssignedWells())return $("#numWarning").text("You've entered too many mice"),
$("#numSamples").val(currentNumSamples),void 0
;this.checkAndUpdateWells()
;for(var firstSample=this.firstSampleGroup,wellGroup,wellGroupSearch,mouseID,lastMouseID,lastWellGroupSearch,lastWellIDs,isLastDup=false,i=0;i<listLength;i++){
wellGroup=firstSample+i,
wellGroupSearch=this.groupSearch(wellGroup)
;var wellIDs=this.getWellIDsFromGroupNum(wellGroup)
;mouseID=splitList[i];var thisID=mouseID,time=0
;if(mouseID===lastMouseID&&!isLastDup)$(".plateID"+lastWellGroupSearch).val(lastMouseID+" pre"),
$(lastWellGroupSearch+this.calcSearch("plateID")).text(lastMouseID+" pre"),
this.fillWells("plateID",lastWellIDs,lastMouseID+" pre"),
thisID=mouseID+" post",
time=5,isLastDup=true;else isLastDup=false
;$(".plateID"+wellGroupSearch).val(thisID),
$(wellGroupSearch+this.calcSearch("plateID")).text(thisID),
this.fillWells("plateID",wellIDs,thisID),
$(".mouseID"+wellGroupSearch).val(mouseID),
this.fillWells("mouseID",wellIDs,mouseID),
$(".time"+wellGroupSearch).val(time),this.fillWells("time",wellIDs,time),
lastMouseID=mouseID,
lastWellGroupSearch=wellGroupSearch,lastWellIDs=wellIDs
}this.resize()}};